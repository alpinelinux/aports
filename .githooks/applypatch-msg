#!/bin/sh
# Hook: applypatch-msg
# This hook is invoked by git-am[1]. It takes a single parameter, the
# name of the file that holds the proposed commit log message. Exiting
# with a non-zero status causes git am to abort before applying the
# patch.
# 
# The hook is allowed to edit the message file in place, and can be
# used to normalize the message into some project standard format. It
# can also be used to refuse the commit after inspecting the message
# file.
# 
# The default applypatch-msg hook, when enabled, runs the commit-msg
# hook, if the latter is enabled.
#
#### Sample file ####
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

#. git-sh-setup
#commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
#test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
#:

#### END sample file ####

git_exec_path="$(git --exec-path)"

if test -r "${git_exec_path}/git-sh-setup" ; then
    . "${git_exec_path}/git-sh-setup" || exit 1
fi

require_work_tree_exists &&
    require_work_tree
cd_to_toplevel

# Use a temporary __realpath function
# We need something to find the functions.sh file in the first place.
__realpath() {
    local cmd path

    cmd="$(command -v realpath)"
    if ! path="$("${cmd:-false}" "${1}")" ; then
        path="$(cd "${1}"; pwd)"
    fi

    printf -- '%s\n' "${path}"
}

hooks_dir="$(__realpath "$(git rev-parse --git-path hooks)")"
if test -r "${hooks_dir}/functions.sh" ; then
    . "${hooks_dir}/functions.sh" || exit 2
fi
# remove the temporary __realpath function
unset -f __realpath

commit_msg_file="$(_realpath "${1}")"

if test -n "${GITHUB_PR_NUMBER}" ; then
    # ensure a blank line when the file is not empty
    test -s "${commit_msg_file}" && _printf '\n\n' >> "${commit_msg_file}"

    _printv GITHUB_PR_KEYWORD "Closes GH-${GITHUB_PR_NUMBER}"
    _printl "${GITHUB_PR_KEYWORD}" >> "${commit_msg_file}"
fi

commitmsg="$(_realpath "$(git rev-parse --git-path hooks/commit-msg)")"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:
