diff -r 400ffc527c25 lib_pypy/_tkinter/tklib_build.py
--- a/lib_pypy/_tkinter/tklib_build.py	Thu May 11 10:39:45 2017 +0000
+++ b/lib_pypy/_tkinter/tklib_build.py	Fri May 12 13:26:52 2017 +0300
@@ -22,12 +22,23 @@
     linklibs = ['tcl', 'tk']
     libdirs = []
 else:
+    # On some Linux distributions, the tcl and tk libraries are
+    # stored in /usr/include, so we must check this case also
+    found = False
     for _ver in ['', '8.6', '8.5', '']:
         incdirs = ['/usr/include/tcl' + _ver]
         linklibs = ['tcl' + _ver, 'tk' + _ver]
         libdirs = []
         if os.path.isdir(incdirs[0]):
+            found = True
             break
+    if not found:
+        for _ver in ['8.6', '8.5', '']:
+            incdirs = ['/usr/include']
+            linklibs = ['tcl' + _ver, 'tk' + _ver]
+            libdirs=[]
+            if os.path.isfile(''.join([ '/usr/lib/lib', linklibs[1], '.so'])):
+                break
 
 config_ffi = FFI()
 config_ffi.cdef("""
diff -r 400ffc527c25 pypy/goal/targetpypystandalone.py
--- a/pypy/goal/targetpypystandalone.py	Thu May 11 10:39:45 2017 +0000
+++ b/pypy/goal/targetpypystandalone.py	Fri May 12 13:26:52 2017 +0300
@@ -269,6 +269,9 @@
                 raise Exception("Cannot use the --profopt option "
                                 "when --shared is on (it is by default). "
                                 "See issue #2398.")
+        elif config.translation.nopax is not None:
+            raise Exception("Cannot use the --nopax option "
+                            "when --shared is off (it is on by default). ")
         if sys.platform == 'win32':
             libdir = thisdir.join('..', '..', 'libs')
             libdir.ensure(dir=1)
diff -r 400ffc527c25 rpython/config/translationoption.py
--- a/rpython/config/translationoption.py	Thu May 11 10:39:45 2017 +0000
+++ b/rpython/config/translationoption.py	Fri May 12 13:26:52 2017 +0300
@@ -146,6 +146,9 @@
               cmdline="--profopt"),
     BoolOption("noprofopt", "Don't use profile based optimization",
                default=False, cmdline="--no-profopt", negation=False),
+    BoolOption("nopax", "Use this in case your system comes with a PAX protection. --nopax will disable it for pypy, so that it can use the jit. Requires paxmark to be installed",
+               default=False,
+               cmdline="--nopax"),
     BoolOption("instrument", "internal: turn instrumentation on",
                default=False, cmdline=None),
     BoolOption("countmallocs", "Count mallocs and frees", default=False,
diff -r 400ffc527c25 rpython/translator/c/genc.py
--- a/rpython/translator/c/genc.py	Thu May 11 10:39:45 2017 +0000
+++ b/rpython/translator/c/genc.py	Fri May 12 13:26:52 2017 +0300
@@ -391,6 +391,8 @@
         shared = self.config.translation.shared
 
         extra_opts = []
+        if self.config.translation.nopax:
+            extra_opts += ["nopax"]
         if self.config.translation.make_jobs != 1:
             extra_opts += ['-j', str(self.config.translation.make_jobs)]
         if self.config.translation.lldebug:
@@ -442,6 +444,21 @@
                 'cd $(RPYDIR)/translator/goal && $(ABS_TARGET) $(PROFOPT)',
                 '$(MAKE) clean_noprof',
                 '$(MAKE) CFLAGS="-fprofile-use $(CFLAGS)" LDFLAGS="-fprofile-use $(LDFLAGS)" $(TARGET)']))
+
+        # No-pax code for the make file
+
+
+
+        if self.config.translation.nopax:
+            mk.definition('PAX_TARGET','pypy-c')
+            # mk.rule('$(PAX_TARGET)','$(TARGET) main.o','paxmark -zm $(PAX_TARGET)')
+
+            rules.append(('$(PAX_TARGET)','$(TARGET) main.o',[
+                '$(CC_LINK) $(LDFLAGS_LINK) main.o -L. -l$(SHARED_IMPORT_LIB) -o $@ $(RPATH_FLAGS)',
+                'paxmark -zm $(PAX_TARGET)']))
+
+            mk.rule('nopax','',
+                    '$(MAKE) CFLAGS="$(CFLAGS) $(CFLAGSEXTRA)" LDFLAGS="$(LDFLAGS)" $(PAX_TARGET)')
         for rule in rules:
             mk.rule(*rule)
 
diff -r b2569cf1bd55 rpython/tool/ansi_mandelbrot.py
--- a/rpython/tool/ansi_mandelbrot.py	Mon Apr 24 19:19:11 2017 +0200
+++ b/rpython/tool/ansi_mandelbrot.py	Thu May 25 17:51:39 2017 +0300
@@ -99,13 +99,14 @@
         (-1.15, -0.28, 0.3, 58),
         (-1.15, -0.28, 0.05, 26),
             ]
-    def __init__(self, **kwargs):
+    def __init__(self, quiet=False, **kwargs):
         self.kwargs = kwargs
         self.zoom_location = -1
         self.max_colour = 256
         self.colour_range = None
         self.invert = True
         self.interesting_coordinates = []
+        self.quiet = quiet
         self.init()
 
     def init(self):
@@ -125,34 +126,35 @@
 
     def dot(self):
         """ Emits a colourful character. """
-        x = c = 0
-        try:
-            x, y, c = self.gen.next()
-            if x == 0:
-                width = get_terminal_width()
-                if width != self.width:
-                    self.init()
-        except StopIteration:
-            if DEBUG and self.interesting_coordinates:
-                print >>sys.stderr, "Interesting coordinates:", self.interesting_coordinates
-                self.interesting_coordinates = []
-            kwargs = self.kwargs
-            self.zoom_location += 1
-            self.zoom_location %= len(self.zoom_locations)
-            loc = self.zoom_locations[self.zoom_location]
-            kwargs.update({"x_pos": loc[0], "y_pos": loc[1], "distance": loc[2]})
-            self.max_colour = loc[3]
-            if DEBUG:
-                # Only used for debugging new locations:
-                print "Colour range", self.colour_range
-            self.colour_range = None
-            self.restart()
-            return
-        if self.print_pixel(c, self.invert):
-            self.interesting_coordinates.append(dict(x=(x, self.mandelbrot.x_range[x]),
-                                                     y=(y, self.mandelbrot.y_range[y])))
-        if x == self.width - 1:
-            print >>sys.stderr
+        if not self.quiet:
+            x = c = 0
+            try:
+                x, y, c = self.gen.next()
+                if x == 0:
+                    width = get_terminal_width()
+                    if width != self.width:
+                        self.init()
+            except StopIteration:
+                if DEBUG and self.interesting_coordinates:
+                    print >>sys.stderr, "Interesting coordinates:", self.interesting_coordinates
+                    self.interesting_coordinates = []
+                kwargs = self.kwargs
+                self.zoom_location += 1
+                self.zoom_location %= len(self.zoom_locations)
+                loc = self.zoom_locations[self.zoom_location]
+                kwargs.update({"x_pos": loc[0], "y_pos": loc[1], "distance": loc[2]})
+                self.max_colour = loc[3]
+                if DEBUG:
+                    # Only used for debugging new locations:
+                    print "Colour range", self.colour_range
+                self.colour_range = None
+                self.restart()
+                return
+            if self.print_pixel(c, self.invert):
+                self.interesting_coordinates.append(dict(x=(x, self.mandelbrot.x_range[x]),
+                                                         y=(y, self.mandelbrot.y_range[y])))
+            if x == self.width - 1:
+                print >>sys.stderr
 
     def print_pixel(self, colour, invert=1):
         chars = [".", ".", "+", "*", "%", "#"]
diff -r b2569cf1bd55 rpython/tool/ansi_print.py
--- a/rpython/tool/ansi_print.py	Mon Apr 24 19:19:11 2017 +0200
+++ b/rpython/tool/ansi_print.py	Thu May 25 17:51:39 2017 +0300
@@ -8,7 +8,7 @@
 
 
 isatty = getattr(sys.stderr, 'isatty', lambda: False)
-mandelbrot_driver = Driver()
+mandelbrot_driver = Driver(quiet=True)
 wrote_dot = False     # global shared state
 
 
