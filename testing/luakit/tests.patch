--- a/clib/soup.c
+++ b/clib/soup.c
@@ -106,7 +106,7 @@ luaH_soup_set_cookies_storage(lua_State *L)
         luaL_error(L, "cookies_storage cannot be empty");
     g_free(cookies_storage);
     cookies_storage = g_strdup(new_path);
-    
+
     if ((f = g_fopen(cookies_storage, "a")) != NULL) {
         g_chmod(cookies_storage, 0600);
         fclose(f);
--- a/lib/binds.lua
+++ b/lib/binds.lua
@@ -496,7 +496,7 @@ modes.add_cmds({
                     callback = function (_, err)
                         w:error(err)
                     end,
-                }) 
+                })
             else
                 w:error("No argument provided")
             end
--- a/lib/help_chrome.lua
+++ b/lib/help_chrome.lua
@@ -27,7 +27,8 @@ local index_html_template = [==[
     </style>
 </head>
 <body>
-    <header id="page-header"><h1>Luakit Help</h1><div class="rhs">version {version} / webkit {webkitversion}</div></header>
+    <header id="page-header"><h1>Luakit Help</h1><div
+    class="rhs">version {version} / webkit {webkitversion}</div></header>
     <div class=content-margin>
         <h2>About Luakit</h2>
             <p>Luakit is a highly configurable, browser framework based on the <a
--- a/tests/async/test_module_binds_have_descriptions.lua
+++ b/tests/async/test_module_binds_have_descriptions.lua
@@ -47,6 +47,7 @@ local function add_file_error(errors, file, error, ...)
 end
 
 T.test_module_binds_have_descriptions = function ()
+    require("newtab_chrome")
     local files = test.find_files({"lib/"}, ".+%.lua$", {"_wm%.lua$", "modes%.lua", "unique_instance%.lua"})
 
     local errors = {}
--- a/tests/lib.lua
+++ b/tests/lib.lua
@@ -115,7 +115,7 @@ function _M.wait(timeout)
     shared_lib.traceback = debug.traceback("",2)
 
     waiting = true
-    timeout = timeout or 200
+    timeout = timeout or 1000
     return coroutine.yield({timeout=timeout})
 end
 
