Author: Axel Siebenborn <axel.siebenborn@sap.com>
URL: https://hg.openjdk.java.net/portola/jdk11/rev/c3ce7781e3ff
Summary: Exclude NativeLibraryTest.java on musl.
----

diff -upr a/test/jdk/TEST.ROOT b/test/jdk/TEST.ROOT
--- a/test/jdk/TEST.ROOT
+++ b/test/jdk/TEST.ROOT
@@ -40,6 +40,7 @@ requires.properties= \
     vm.gc.Z \
     vm.graal.enabled \
     vm.cds \
+    vm.musl \
     vm.hasSA \
     vm.hasSAandCanAttach \
     vm.hasJFR \
diff -upr a/test/jdk/java/lang/ClassLoader/nativeLibrary/NativeLibraryTest.java b/test/jdk/java/lang/ClassLoader/nativeLibrary/NativeLibraryTest.java
--- a/test/jdk/java/lang/ClassLoader/nativeLibrary/NativeLibraryTest.java	2019-02-02 23:04:35.723344608 +0100
+++ b/test/jdk/java/lang/ClassLoader/nativeLibrary/NativeLibraryTest.java	2019-02-02 23:52:29.841920853 +0100
@@ -25,6 +25,9 @@
  * @test
  * @bug 8164512 8191360
  * @requires vm.compMode != "Xcomp"
+ * @comment Under musl, dlclose is a no-op. The static variable 'count' in libnative.c
+ * keeps its value across a GC and the check in Test.java fails.
+ * @requires !vm.musl
  * @summary verify if the native library is unloaded when the class loader is GC'ed
  * @build p.Test
  * @run main/othervm/native -Xcheck:jni NativeLibraryTest
diff -upr a/test/jtreg-ext/requires/VMProps.java b/test/jtreg-ext/requires/VMProps.java
--- a/test/jtreg-ext/requires/VMProps.java	2019-02-02 23:04:37.039995369 +0100
+++ b/test/jtreg-ext/requires/VMProps.java	2019-02-02 23:52:31.551900185 +0100
@@ -23,9 +23,11 @@
 package requires;

 import java.io.BufferedInputStream;
+import java.io.BufferedReader;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -93,6 +95,7 @@ public class VMProps implements Callable
         // vm.graal.enabled is true if Graal is used as JIT
         map.put("vm.graal.enabled", isGraalEnabled());
         map.put("docker.support", dockerSupport());
+        map.put("vm.musl", isMusl());
         map.put("release.implementor", implementor());
         vmGC(map); // vm.gc.X = true/false
         vmOptFinalFlags(map);
@@ -437,6 +440,25 @@ public class VMProps implements Callable
         return (p.exitValue() == 0);
     }

+    /**
+     * Check if we run with musl libc.
+     *
+     * @return true if we run with musl libc.
+     */
+    protected String isMusl() {
+        try {
+            ProcessBuilder pb = new ProcessBuilder("ldd", "--version");
+            pb.redirectErrorStream(true);
+            final Process p = pb.start();
+            BufferedReader br = new BufferedReader(new InputStreamReader(p.getInputStream()));
+            String line = br.readLine();
+            if (line != null && line.contains("musl")) {
+                return "true";
+            }
+        } catch (Exception e) {
+        }
+        return "false";
+    }

     private String implementor() {
         try (InputStream in = new BufferedInputStream(new FileInputStream(
@@ -450,7 +472,6 @@ public class VMProps implements Callable
         return null;
     }

-
     /**
      * Dumps the map to the file if the file name is given as the property.
      * This functionality could be helpful to know context in the real
