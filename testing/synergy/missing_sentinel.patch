--- a/src/lib/platform/XWindowsScreen.cpp.orig	2017-02-27 21:26:49.297547435 +0800
+++ b/src/lib/platform/XWindowsScreen.cpp	2017-02-27 21:17:14.292348306 +0800
@@ -2,11 +2,11 @@
  * synergy -- mouse and keyboard sharing utility
  * Copyright (C) 2012-2016 Symless Ltd.
  * Copyright (C) 2002 Chris Schoeneman
- * 
+ *
  * This package is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License
  * found in the file LICENSE that should have accompanied this file.
- * 
+ *
  * This package is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@@ -128,7 +128,7 @@
 
 	if (mouseScrollDelta==0) m_mouseScrollDelta=120;
 	s_screen = this;
-	
+
 	if (!disableXInitThreads) {
 	  // initializes Xlib support for concurrent threads.
 	  if (XInitThreads() == 0)
@@ -298,14 +298,14 @@
 			DPMSForceLevel(m_display, DPMSModeOn);
 	}
 	#endif
-	
+
 	// unmap the hider/grab window.  this also ungrabs the mouse and
 	// keyboard if they're grabbed.
 	XUnmapWindow(m_display, m_window);
 
 /* maybe call this if entering for the screensaver
 	// set keyboard focus to root window.  the screensaver should then
-	// pick up key events for when the user enters a password to unlock. 
+	// pick up key events for when the user enters a password to unlock.
 	XSetInputFocus(m_display, PointerRoot, PointerRoot, CurrentTime);
 */
 
@@ -745,7 +745,7 @@
 		LOG((CLOG_WARN "failed to register hotkey %s (id=%04x mask=%04x)", synergy::KeyMap::formatKey(key, mask).c_str(), key, mask));
 		return 0;
 	}
-	
+
 	LOG((CLOG_DEBUG "registered hotkey %s (id=%04x mask=%04x) as id=%d", synergy::KeyMap::formatKey(key, mask).c_str(), key, mask, id));
 	return id;
 }
@@ -1095,7 +1095,7 @@
 	// find the appropriate style.  synergy supports XIMPreeditNothing
 	// only at the moment.
 	XIMStyles* styles;
-	if (XGetIMValues(im, XNQueryInputStyle, &styles, NULL) != NULL ||
+	if (XGetIMValues(im, XNQueryInputStyle, &styles, (char*)NULL) != NULL ||
 		styles == NULL) {
 		LOG((CLOG_WARN "cannot get IM styles"));
 		XCloseIM(im);
@@ -1118,7 +1118,7 @@
 	}
 
 	// create an input context for the style and tell it about our window
-	XIC ic = XCreateIC(im, XNInputStyle, style, XNClientWindow, m_window, NULL);
+	XIC ic = XCreateIC(im, XNInputStyle, style, XNClientWindow, m_window, (char*)NULL);
 	if (ic == NULL) {
 		LOG((CLOG_WARN "cannot create IC"));
 		XCloseIM(im);
@@ -1127,7 +1127,7 @@
 
 	// find out the events we must select for and do so
 	unsigned long mask;
-	if (XGetICValues(ic, XNFilterEvents, &mask, NULL) != NULL) {
+	if (XGetICValues(ic, XNFilterEvents, &mask, (char *)NULL) != NULL) {
 		LOG((CLOG_WARN "cannot get IC filter events"));
 		XDestroyIC(ic);
 		XCloseIM(im);
