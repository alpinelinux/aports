# Contributor: Orson Teodoro <orsonteodoro@hotmail.com>
# Maintainer: Orson Teodoro <orsonteodoro@hotmail.com>

pkgname=godot
pkgver=2.1.4
pkgrel=0
pkgdesc="Godot Engine â€“ Multi-platform 2D and 3D game engine"
url="https://godotengine.org"
arch="x86_64"
license="MIT Apache-2.0 BSD-2-clause BSD-3-clause Zlib MPL-2.0 curl FTL RSA-MD \
	CC-BY-3.0 CC-BY-2.0 CC0-1.0 OFL-1.1 custom"
checkdepends="xdotool"
makedepends="python2-dev freetype-dev pkgconf pulseaudio-dev scons \
	libxinerama-dev libx11-dev libevdev-dev libexecinfo-dev glu-dev\
	libxcursor-dev libxrandr-dev clang-dev openssl-dev doxygen alsa-lib-dev"
_demopkgname=godot-demo-projects
_demopkgver=2.1.4-stable
source="$pkgname-$pkgver.tar.gz::https://github.com/godotengine/godot/archive/$pkgver-stable.tar.gz
	$pkgname-$pkgver-demos.tar.gz::https://github.com/godotengine/$_demopkgname/archive/$_demopkgver.tar.gz
	godot.desktop
	joypad-linux-byteswap-header.patch
	execinfo-libs.patch
	shader.txt"
builddir="$srcdir/$pkgname-$pkgver-stable"
subpackages="$pkgname-demos"
options="!check" # disabled because cannot run gui tests

build() {
	cd "$builddir"
	scons platform=x11 use_llvm=yes debug=1 # debug required for test suite
}

package() {
	cd "$builddir"
	install -d "$pkgdir"/usr/bin "$pkgdir"/usr/share/applications/ \
		"$pkgdir"/usr/share/pixmaps/ \
		"$pkgdir"/usr/share/licenses/$_pkgname/ \
		"$pkgdir"/usr/share/doc/$_pkgname/ \
		"$pkgdir"/usr/share/html/$_pkgname/
	install -t "$pkgdir"/usr/bin bin/godot.*.tools.*
	cd "$pkgdir"/usr/bin
	ln -s $(basename $(ls "$pkgdir"/usr/bin/godot.*.tools.*)) godot
	cd "$builddir"
	install -m644 "$srcdir"/godot.desktop \
		"$pkgdir"/usr/share/applications/godot.desktop
	install -m644 "$builddir"/icon.png \
			"$pkgdir"/usr/share/pixmaps/$pkgname.png
	install -t "$pkgdir"/usr/share/licenses/$_pkgname/ LOGO_LICENSE.md \
			COPYRIGHT.txt
	install -t "$pkgdir"/usr/share/doc/$_pkgname/ README.md AUTHORS.md
	cd doc
	make doxygen
	mv _build/doxygen/html/* "$pkgdir"/usr/share/html/$_pkgname/
}

_interactivetest() {
	msg "Running $1"
	"$builddir"/bin/godot.x11.tools.*.llvm -test $1 -ad ALSA -p 0x0 \
		-r 1440x900 -w &
	local pid="$!"
	[[ "$1" == "multimesh" || "$1" == "detailer" ]] \
		&& ( sleep 1 ; xdotool click 1 ; sleep 0.25; xdotool click 1 ; \
		sleep 0.25 ; xdotool click 1 ; sleep 0.25 ; xdotool click 1 ; \
		sleep 0.25 ; xdotool click 1 ) &
	if [[ "$1" == "gui" ]] ; then
		sleep 1
		xdotool mousemove 74 205
		xdotool click 1
		xdotool click 1
		xdotool type "Hello Alpine Linux!"

		xdotool mousemove 268 252
		xdotool click 1
		sleep 0.25
		xdotool click 1
		sleep 0.25
		xdotool click 1
		sleep 0.25

		xdotool mousemove 320 251
		xdotool click 1
		sleep 0.25
		xdotool click 1
		sleep 0.25
		xdotool click 1
		sleep 0.25

		xdotool mousemove 431 224
		xdotool click 1
		sleep 0.25

		xdotool mousemove 477 230
		xdotool click 1
		sleep 0.25

		xdotool mousemove 543 227
		xdotool click 1
		sleep 0.25

		xdotool mousemove 477 230
		xdotool click 1
		sleep 0.25

		xdotool mousemove 431 224
		xdotool click 1
		sleep 0.25

		xdotool mousemove 61 32
		xdotool mousedown 1
		sleep 0.25
		xdotool mouseup 1
		sleep 0.25
		xdotool mousedown 1
		sleep 0.25
		xdotool mouseup 1
		sleep 0.25

		xdotool mousemove 102 299
		for i in $(seq 1 6) ; do
			xdotool click 4
			sleep 0.25
		done
		for i in $(seq 1 6) ; do
			xdotool click 5
			sleep 0.25
		done
		for i in $(seq 1 6) ; do
			xdotool click 4
			sleep 0.25
		done
	fi
	if [[ "$1" == "render" ]] ; then
		( sleep 10 ; xdotool key a ) &
	else
		( sleep 10 ; kill $2 $pid ) &
	fi
	# get return code
	set +e
	wait $pid
	local ec="$?"
	set -e
	echo "exit code: $ec"
	if [[ "$2" == "-HUP" && "$ec" == "129" ]] ; then
		return 0
	else
		return $ec
	fi
}

_unattendedtest() {
	local type="$1"
	shift
	local expected="$1"
	shift
	local args="$@"
	# arg 3 is the result. It should be good or bad.
	msg "Running type=$type expected=$expected args=$args"
	local output=$("$builddir"/bin/godot.x11.tools.*.llvm \
			-test $type $args -ad ALSA 2>&1)
	echo -e "$output"
	local output2=$(echo -e "$output" | grep -oe "ERROR: " | head -n 1)
	local output3=$(echo -e "$output" | grep -oe "Error: " | head -n 1)
	if [[ "$output2" == "ERROR: " || "$output3" == "Error: " ]] ; then
		if [[ "$expected" == "bad" ]] ; then
			msg "bad = pass"
			return 0
		else
			msg "good = fail"
			return 1
		fi
	fi
}

check() {
	local scriptexample1=\
"$startdir"/pkg/$pkgname-demos/usr/share/godot/demos/misc/udp_chat/chat.gd
	local scriptexample2=\
"$startdir"/pkg/$pkgname-demos/usr/share/godot/demos/2d/tetris/grid.gd
	local shaderexample="$srcdir"/shader.txt
	cd "$builddir"
	_unattendedtest string good
	_unattendedtest containers good
	_unattendedtest math good
	_unattendedtest id good
	_unattendedtest shaderlang good $shaderexample
	_unattendedtest gd_tokenizer good $scriptexample1
	#_unattendedtest gd_parser good $scriptexample1 # bugged
	#_unattendedtest gd_compiler good $scriptexample1 # bugged
	_unattendedtest gd_bytecode good $scriptexample1
	_unattendedtest gd_tokenizer bad $scriptexample2
	#_unattendedtest gd_parser bad $scriptexample2
	#_unattendedtest gd_compiler bad $scriptexample2
	_unattendedtest gd_bytecode bad $scriptexample2
	_unattendedtest ordered_hash_map $scriptexample2
	#_unattendedtest image # segfaults because missing as1.png art asset
	_interactivetest render "-HUP"
	#_interactivetest misc "-HUP" # broken? it shows nothing
	#_interactivetest particles "-HUP" # broken? it just shows splash.
	#_interactivetest detailer "-SIGKILL" # disabled because it's lame
	#_interactivetest multimesh "-HUP" # disabled because it's lame
	_interactivetest gui "-HUP"
	_interactivetest physics "-HUP"
	_interactivetest physics_2d "-HUP"
}

demos() {
	pkgdesc="$pkgdesc (Demos)"
	depends="$depends $pkgname"
	license="MIT OFL-1.1 Apache-2.0"
	install -d "$subpkgdir"/usr/share/godot
	mv "$srcdir"/$_demopkgname-$_demopkgver "$srcdir"/demos
	mv "$srcdir"/demos "$subpkgdir"/usr/share/godot/
}

sha512sums="6557197b3aabc2dab5d583cab7a76fd5591c0a89347a10ec1cf370230e57fdbca792f99d69456a3d03ba6f22865464771e81505cb39c2b4e9f3c0b82ea9d2e5b  godot-2.1.4.tar.gz
5d8a2f04c9c7cc110d5a3abf0aab0e14ab33f5b2ebfc0aff305095eef6c42f7f420531fb68b5b24dec6c85db3840528ac8d65586aaf5cb7d2d4453ed04e3170f  godot-2.1.4-demos.tar.gz
0d83c239fb37a2bce02e2ececa97dbd3ae47bfb75d1c7c84101102bc25bca0be06d3505af89b12c39632dc056378350b0e1c5354feb4858d1af1031000f93365  godot.desktop
d3c54afcb94ca0b40e34558f9c4925fa64744accfd168e1a0b616ec163678abc4bf35ccfa4545b13340c4295a65376ad78f91c31d91c059e12621b6b6f5839e9  joypad-linux-byteswap-header.patch
21430e8116cc198b5f3190202ee9ebf376d6001796732bde84f0dd520bf55efe524dd7d02400d7f6d0edd07d8c5b0ed7c392836cfa6c9b993ae19f872fb17d31  execinfo-libs.patch
d20d67cc94e89efa9f6b832abb45a3e5519322ccf6e103b5f855243acdc2463c4e3cc8d6bf8a3f4537f662f76ab91f8606037018729e63f7d9934efaff2cc8be  shader.txt"
