Author: Portola Project <portola-dev@openjdk.java.net>
URL: https://openjdk.java.net/projects/portola/
Summary: Provide a port of the JDK to the musl C library
----

diff -upr a/common/autoconf/build-aux/config.guess b/common/autoconf/build-aux/config.guess
--- a/common/autoconf/build-aux/config.guess
+++ b/common/autoconf/build-aux/config.guess
@@ -30,6 +30,17 @@
 DIR=`dirname $0`
 OUT=`. $DIR/autoconf-config.guess`
 
+# config.guess doesn't identify systems running the musl C library, and will
+# instead return a string with a -gnu suffix. This block detects musl and
+# modifies the string to have a -musl suffix instead. 
+echo $OUT | grep -- -linux- > /dev/null 2> /dev/null
+if test $? = 0; then
+  ldd_version=`ldd --version 2>&1 | head -1 | cut -f1 -d' '`
+  if [ x"${ldd_version}" = x"musl" ]; then
+    OUT=`echo $OUT | sed 's/-gnu/-musl/'`
+  fi
+fi
+
 # Test and fix solaris on x86_64
 echo $OUT | grep i386-pc-solaris > /dev/null 2> /dev/null
 if test $? = 0; then
diff -upr a/common/autoconf/build-aux/config.sub b/common/autoconf/build-aux/config.sub
--- a/common/autoconf/build-aux/config.sub
+++ b/common/autoconf/build-aux/config.sub
@@ -29,6 +29,11 @@
 
 DIR=`dirname $0`
 
+if [ "$1"x = "x86_64-unknown-linux-musl"x ]; then
+    echo $1
+    exit
+fi
+
 # First, filter out everything that doesn't begin with "aarch64-"
 if ! echo $* | grep '^aarch64-' >/dev/null ; then
     . $DIR/autoconf-config.sub "$@"
diff -upr a/common/autoconf/buildjdk-spec.gmk.in b/common/autoconf/buildjdk-spec.gmk.in
--- a/common/autoconf/buildjdk-spec.gmk.in
+++ b/common/autoconf/buildjdk-spec.gmk.in
@@ -50,17 +50,20 @@ IMAGES_OUTPUTDIR := $(patsubst $(BUILD_O
 
 OPENJDK_BUILD_CPU_LEGACY := @OPENJDK_BUILD_CPU_LEGACY@
 OPENJDK_BUILD_CPU_LEGACY_LIB := @OPENJDK_BUILD_CPU_LEGACY_LIB@
+OPENJDK_BUILD_LIBC := @OPENJDK_BUILD_LIBC@
 OPENJDK_TARGET_CPU := @OPENJDK_BUILD_CPU@
 OPENJDK_TARGET_CPU_ARCH := @OPENJDK_BUILD_CPU_ARCH@
 OPENJDK_TARGET_CPU_BITS := @OPENJDK_BUILD_CPU_BITS@
 OPENJDK_TARGET_CPU_ENDIAN := @OPENJDK_BUILD_CPU_ENDIAN@
 OPENJDK_TARGET_CPU_LEGACY := @OPENJDK_BUILD_CPU_LEGACY@
+OPENJDK_TARGET_LIBC := @OPENJDK_BUILD_LIBC@
 
 HOTSPOT_TARGET_OS := @HOTSPOT_BUILD_OS@
 HOTSPOT_TARGET_OS_TYPE := @HOTSPOT_BUILD_OS_TYPE@
 HOTSPOT_TARGET_CPU := @HOTSPOT_BUILD_CPU@
 HOTSPOT_TARGET_CPU_ARCH := @HOTSPOT_BUILD_CPU_ARCH@
 HOTSPOT_TARGET_CPU_DEFINE := @HOTSPOT_BUILD_CPU_DEFINE@
+HOTSPOT_TARGET_LIBC := @HOTSPOT_BUILD_LIBC@
 
 CFLAGS_JDKLIB := @OPENJDK_BUILD_CFLAGS_JDKLIB@
 CXXFLAGS_JDKLIB := @OPENJDK_BUILD_CXXFLAGS_JDKLIB@
diff -upr a/common/autoconf/configure.ac b/common/autoconf/configure.ac
--- a/common/autoconf/configure.ac
+++ b/common/autoconf/configure.ac
@@ -205,6 +205,7 @@ JDKOPT_SETUP_CODE_COVERAGE
 
 # Need toolchain to setup dtrace
 HOTSPOT_SETUP_DTRACE
+HOTSPOT_SETUP_SA
 HOTSPOT_ENABLE_DISABLE_AOT
 HOTSPOT_ENABLE_DISABLE_GTEST
 
diff -upr a/common/autoconf/generated-configure.sh b/common/autoconf/generated-configure.sh
--- a/common/autoconf/generated-configure.sh
+++ b/common/autoconf/generated-configure.sh
@@ -705,6 +705,7 @@ FIXPATH_DETACH_FLAG
 FIXPATH
 BUILD_GTEST
 ENABLE_AOT
+INCLUDE_SA_ATTACH
 GCOV_ENABLED
 ZIP_EXTERNAL_DEBUG_SYMBOLS
 COPY_DEBUG_SYMBOLS
@@ -973,6 +974,7 @@ CANONICAL_TOPDIR
 ORIGINAL_TOPDIR
 TOPDIR
 PATH_SEP
+HOTSPOT_BUILD_LIBC
 HOTSPOT_BUILD_CPU_DEFINE
 HOTSPOT_BUILD_CPU_ARCH
 HOTSPOT_BUILD_CPU
@@ -984,6 +986,7 @@ OPENJDK_BUILD_CPU_OSARCH
 OPENJDK_BUILD_CPU_ISADIR
 OPENJDK_BUILD_CPU_LEGACY_LIB
 OPENJDK_BUILD_CPU_LEGACY
+HOTSPOT_TARGET_LIBC
 HOTSPOT_TARGET_CPU_DEFINE
 HOTSPOT_TARGET_CPU_ARCH
 HOTSPOT_TARGET_CPU
@@ -1000,6 +1003,7 @@ RELEASE_FILE_OS_ARCH
 RELEASE_FILE_OS_NAME
 OPENJDK_MODULE_TARGET_PLATFORM
 COMPILE_TYPE
+OPENJDK_TARGET_LIBC
 OPENJDK_TARGET_CPU_ENDIAN
 OPENJDK_TARGET_CPU_BITS
 OPENJDK_TARGET_CPU_ARCH
@@ -1007,6 +1011,7 @@ OPENJDK_TARGET_CPU
 OPENJDK_TARGET_OS_ENV
 OPENJDK_TARGET_OS_TYPE
 OPENJDK_TARGET_OS
+OPENJDK_BUILD_LIBC
 OPENJDK_BUILD_CPU_ENDIAN
 OPENJDK_BUILD_CPU_BITS
 OPENJDK_BUILD_CPU_ARCH
@@ -1100,6 +1105,7 @@ infodir
 docdir
 oldincludedir
 includedir
+runstatedir
 localstatedir
 sharedstatedir
 sysconfdir
@@ -1187,6 +1193,7 @@ enable_debug_symbols
 enable_zip_debug_info
 enable_native_coverage
 enable_dtrace
+enable_sa_attach
 enable_aot
 enable_hotspot_gtest
 with_stdc__lib
@@ -1391,6 +1398,7 @@ datadir='${datarootdir}'
 sysconfdir='${prefix}/etc'
 sharedstatedir='${prefix}/com'
 localstatedir='${prefix}/var'
+runstatedir='${localstatedir}/run'
 includedir='${prefix}/include'
 oldincludedir='/usr/include'
 docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'
@@ -1643,6 +1651,15 @@ do
   | -silent | --silent | --silen | --sile | --sil)
     silent=yes ;;
 
+  -runstatedir | --runstatedir | --runstatedi | --runstated \
+  | --runstate | --runstat | --runsta | --runst | --runs \
+  | --run | --ru | --r)
+    ac_prev=runstatedir ;;
+  -runstatedir=* | --runstatedir=* | --runstatedi=* | --runstated=* \
+  | --runstate=* | --runstat=* | --runsta=* | --runst=* | --runs=* \
+  | --run=* | --ru=* | --r=*)
+    runstatedir=$ac_optarg ;;
+
   -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)
     ac_prev=sbindir ;;
   -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \
@@ -1780,7 +1797,7 @@ fi
 for ac_var in	exec_prefix prefix bindir sbindir libexecdir datarootdir \
 		datadir sysconfdir sharedstatedir localstatedir includedir \
 		oldincludedir docdir infodir htmldir dvidir pdfdir psdir \
-		libdir localedir mandir
+		libdir localedir mandir runstatedir
 do
   eval ac_val=\$$ac_var
   # Remove trailing slashes.
@@ -1933,6 +1950,7 @@ Fine tuning of the installation director
   --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]
   --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]
   --localstatedir=DIR     modifiable single-machine data [PREFIX/var]
+  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]
   --libdir=DIR            object code libraries [EPREFIX/lib]
   --includedir=DIR        C header files [PREFIX/include]
   --oldincludedir=DIR     C header files for non-gcc [/usr/include]
@@ -1996,6 +2014,9 @@ Optional Features:
   --enable-dtrace[=yes/no/auto]
                           enable dtrace. Default is auto, where dtrace is
                           enabled if all dependencies are present.
+  --enable-sa-attach[=yes/no/auto]
+                          enable serviceability agent attach. Default is auto,
+                          where it is enabled if all dependencies are present.
   --enable-aot[=yes/no/auto]
                           enable ahead of time compilation feature. Default is
                           auto, where aot is enabled if all dependencies are
@@ -4354,6 +4375,11 @@ VALID_JVM_VARIANTS="server client minima
 
 
 ###############################################################################
+# Check if the serviceability agent attach functionality should be included.
+#
+
+
+###############################################################################
 # Set up all JVM features for each JVM variant.
 #
 
@@ -15739,6 +15765,18 @@ test -n "$target_alias" &&
       ;;
   esac
 
+  case "$build_os" in
+    *linux*-musl)
+      VAR_LIBC=musl
+      ;;
+    *linux*-gnu)
+      VAR_LIBC=gnu
+      ;;
+    *)
+      VAR_LIBC=default
+      ;;
+  esac
+
 
   # First argument is the cpu name from the trip/quad
   case "$build_cpu" in
@@ -15829,6 +15867,8 @@ test -n "$target_alias" &&
   OPENJDK_BUILD_CPU_ARCH="$VAR_CPU_ARCH"
   OPENJDK_BUILD_CPU_BITS="$VAR_CPU_BITS"
   OPENJDK_BUILD_CPU_ENDIAN="$VAR_CPU_ENDIAN"
+  OPENJDK_BUILD_LIBC="$VAR_LIBC"
+
 
 
 
@@ -15842,6 +15882,13 @@ $as_echo_n "checking openjdk-build os-cp
   { $as_echo "$as_me:${as_lineno-$LINENO}: result: $OPENJDK_BUILD_OS-$OPENJDK_BUILD_CPU" >&5
 $as_echo "$OPENJDK_BUILD_OS-$OPENJDK_BUILD_CPU" >&6; }
 
+  if test "x$OPENJDK_BUILD_OS" = "xlinux"; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking openjdk-build C library" >&5
+$as_echo_n "checking openjdk-build C library... " >&6; }
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: $OPENJDK_BUILD_LIBC" >&5
+$as_echo "$OPENJDK_BUILD_LIBC" >&6; }
+  fi
+
   # Convert the autoconf OS/CPU value to our own data, into the VAR_OS/CPU variables.
 
   case "$host_os" in
@@ -15878,6 +15925,18 @@ $as_echo "$OPENJDK_BUILD_OS-$OPENJDK_BUI
       ;;
   esac
 
+  case "$host_os" in
+    *linux*-musl)
+      VAR_LIBC=musl
+      ;;
+    *linux*-gnu)
+      VAR_LIBC=gnu
+      ;;
+    *)
+      VAR_LIBC=default
+      ;;
+  esac
+
 
   # First argument is the cpu name from the trip/quad
   case "$host_cpu" in
@@ -15968,6 +16027,8 @@ $as_echo "$OPENJDK_BUILD_OS-$OPENJDK_BUI
   OPENJDK_TARGET_CPU_ARCH="$VAR_CPU_ARCH"
   OPENJDK_TARGET_CPU_BITS="$VAR_CPU_BITS"
   OPENJDK_TARGET_CPU_ENDIAN="$VAR_CPU_ENDIAN"
+  OPENJDK_TARGET_LIBC="$VAR_LIBC"
+
 
 
 
@@ -15981,6 +16042,13 @@ $as_echo_n "checking openjdk-target os-c
   { $as_echo "$as_me:${as_lineno-$LINENO}: result: $OPENJDK_TARGET_OS-$OPENJDK_TARGET_CPU" >&5
 $as_echo "$OPENJDK_TARGET_OS-$OPENJDK_TARGET_CPU" >&6; }
 
+  if test "x$OPENJDK_TARGET_OS" = "xlinux"; then
+    { $as_echo "$as_me:${as_lineno-$LINENO}: checking openjdk-target C library" >&5
+$as_echo_n "checking openjdk-target C library... " >&6; }
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: $OPENJDK_TARGET_LIBC" >&5
+$as_echo "$OPENJDK_TARGET_LIBC" >&6; }
+  fi
+
 
 
 # Check whether --with-target-bits was given.
@@ -16144,7 +16212,13 @@ $as_echo "$COMPILE_TYPE" >&6; }
   else
     OPENJDK_TARGET_CPU_BUNDLE="$OPENJDK_TARGET_CPU"
   fi
-  OPENJDK_TARGET_BUNDLE_PLATFORM="${OPENJDK_TARGET_OS_BUNDLE}-${OPENJDK_TARGET_CPU_BUNDLE}"
+
+  OPENJDK_TARGET_LIBC_BUNDLE=""
+  if test "x$OPENJDK_TARGET_LIBC" = "xmusl"; then
+    OPENJDK_TARGET_LIBC_BUNDLE="-$OPENJDK_TARGET_LIBC"
+  fi
+
+  OPENJDK_TARGET_BUNDLE_PLATFORM="${OPENJDK_TARGET_OS_BUNDLE}-${OPENJDK_TARGET_CPU_BUNDLE}${OPENJDK_TARGET_LIBC_BUNDLE}"
 
 
   if test "x$OPENJDK_TARGET_CPU_BITS" = x64; then
@@ -16222,6 +16296,12 @@ $as_echo "$COMPILE_TYPE" >&6; }
   fi
 
 
+  if test "x$OPENJDK_TARGET_LIBC" = "xmusl"; then
+    HOTSPOT_TARGET_LIBC=$OPENJDK_TARGET_LIBC
+  else
+    HOTSPOT_TARGET_LIBC=""
+  fi
+
 
 
   # Also store the legacy naming of the cpu.
@@ -16296,7 +16376,13 @@ $as_echo "$COMPILE_TYPE" >&6; }
   else
     OPENJDK_BUILD_CPU_BUNDLE="$OPENJDK_BUILD_CPU"
   fi
-  OPENJDK_BUILD_BUNDLE_PLATFORM="${OPENJDK_BUILD_OS_BUNDLE}-${OPENJDK_BUILD_CPU_BUNDLE}"
+
+  OPENJDK_BUILD_LIBC_BUNDLE=""
+  if test "x$OPENJDK_BUILD_LIBC" = "xmusl"; then
+    OPENJDK_BUILD_LIBC_BUNDLE="-$OPENJDK_BUILD_LIBC"
+  fi
+
+  OPENJDK_BUILD_BUNDLE_PLATFORM="${OPENJDK_BUILD_OS_BUNDLE}-${OPENJDK_BUILD_CPU_BUNDLE}${OPENJDK_BUILD_LIBC_BUNDLE}"
 
 
   if test "x$OPENJDK_BUILD_CPU_BITS" = x64; then
@@ -16374,6 +16460,12 @@ $as_echo "$COMPILE_TYPE" >&6; }
   fi
 
 
+  if test "x$OPENJDK_BUILD_LIBC" = "xmusl"; then
+    HOTSPOT_BUILD_LIBC=$OPENJDK_BUILD_LIBC
+  else
+    HOTSPOT_BUILD_LIBC=""
+  fi
+
 
 
 
@@ -53672,6 +53764,97 @@ $as_echo "yes, dependencies present" >&6
   fi
 
 
+  # Test for serviceability agent attach dependencies
+  # Check whether --enable-sa-attach was given.
+if test "${enable_sa_attach+set}" = set; then :
+  enableval=$enable_sa_attach;
+fi
+
+
+  SA_ATTACH_DEP_MISSING=false
+
+  for ac_header in thread_db.h
+do :
+  ac_fn_cxx_check_header_mongrel "$LINENO" "thread_db.h" "ac_cv_header_thread_db_h" "$ac_includes_default"
+if test "x$ac_cv_header_thread_db_h" = xyes; then :
+  cat >>confdefs.h <<_ACEOF
+#define HAVE_THREAD_DB_H 1
+_ACEOF
+ SA_ATTACH_HEADERS_OK=yes
+else
+  SA_ATTACH_HEADERS_OK=no
+fi
+
+done
+
+  if test "x$SA_ATTACH_HEADERS_OK" != "xyes"; then
+    SA_ATTACH_DEP_MISSING=true
+  fi
+
+  { $as_echo "$as_me:${as_lineno-$LINENO}: checking if serviceability agent attach should be included" >&5
+$as_echo_n "checking if serviceability agent attach should be included... " >&6; }
+  if test "x$enable_sa_attach" = "xyes"; then
+    if test "x$SA_ATTACH_DEP_MISSING" = "xtrue"; then
+      { $as_echo "$as_me:${as_lineno-$LINENO}: result: no, missing dependencies" >&5
+$as_echo "no, missing dependencies" >&6; }
+
+  # Print a helpful message on how to acquire the necessary build dependency.
+  # sa-attach is the help tag: freetype, cups, alsa etc
+  MISSING_DEPENDENCY=sa-attach
+
+  if test "x$OPENJDK_BUILD_OS_ENV" = "xwindows.cygwin"; then
+    cygwin_help $MISSING_DEPENDENCY
+  elif test "x$OPENJDK_BUILD_OS_ENV" = "xwindows.msys"; then
+    msys_help $MISSING_DEPENDENCY
+  else
+    PKGHANDLER_COMMAND=
+
+    case $PKGHANDLER in
+      apt-get)
+        apt_help     $MISSING_DEPENDENCY ;;
+      yum)
+        yum_help     $MISSING_DEPENDENCY ;;
+      brew)
+        brew_help    $MISSING_DEPENDENCY ;;
+      port)
+        port_help    $MISSING_DEPENDENCY ;;
+      pkgutil)
+        pkgutil_help $MISSING_DEPENDENCY ;;
+      pkgadd)
+        pkgadd_help  $MISSING_DEPENDENCY ;;
+    esac
+
+    if test "x$PKGHANDLER_COMMAND" != x; then
+      HELP_MSG="You might be able to fix this by running '$PKGHANDLER_COMMAND'."
+    fi
+  fi
+
+      as_fn_error $? "Cannot enable sa-attach with missing dependencies. See above. $HELP_MSG" "$LINENO" 5
+    else
+      INCLUDE_SA_ATTACH=true
+      { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes, forced" >&5
+$as_echo "yes, forced" >&6; }
+    fi
+  elif test "x$enable_sa_attach" = "xno"; then
+    INCLUDE_SA_ATTACH=false
+    { $as_echo "$as_me:${as_lineno-$LINENO}: result: no, forced" >&5
+$as_echo "no, forced" >&6; }
+  elif test "x$enable_sa_attach" = "xauto" || test "x$enable_sa_attach" = "x"; then
+    if test "x$SA_ATTACH_DEP_MISSING" = "xtrue"; then
+      INCLUDE_SA_ATTACH=false
+      { $as_echo "$as_me:${as_lineno-$LINENO}: result: no, missing dependencies" >&5
+$as_echo "no, missing dependencies" >&6; }
+    else
+      INCLUDE_SA_ATTACH=true
+      { $as_echo "$as_me:${as_lineno-$LINENO}: result: yes, dependencies present" >&5
+$as_echo "yes, dependencies present" >&6; }
+    fi
+  else
+    as_fn_error $? "Invalid value for --enable-sa-attach: $enable_sa_attach" "$LINENO" 5
+  fi
+
+
+
   # Check whether --enable-aot was given.
 if test "${enable_aot+set}" = set; then :
   enableval=$enable_aot;
diff -upr a/common/autoconf/hotspot.m4 b/common/autoconf/hotspot.m4
--- a/common/autoconf/hotspot.m4	2019-02-13 20:03:08.652337196 +0100
+++ b/common/autoconf/hotspot.m4	2019-02-13 20:03:53.435132939 +0100
@@ -241,6 +241,50 @@ AC_DEFUN_ONCE([HOTSPOT_ENABLE_DISABLE_AO
 ])
 
 ###############################################################################
+# Check if the serviceability agent attach functionality should be included.
+#
+AC_DEFUN_ONCE([HOTSPOT_SETUP_SA],
+[
+  # Test for serviceability agent attach dependencies
+  AC_ARG_ENABLE([sa-attach], [AS_HELP_STRING([--enable-sa-attach@<:@=yes/no/auto@:>@],
+      [enable serviceability agent attach. Default is auto, where it is enabled if all dependencies
+      are present.])])
+
+  SA_ATTACH_DEP_MISSING=false
+
+  AC_CHECK_HEADERS([thread_db.h], [SA_ATTACH_HEADERS_OK=yes],[SA_ATTACH_HEADERS_OK=no])
+  if test "x$SA_ATTACH_HEADERS_OK" != "xyes"; then
+    SA_ATTACH_DEP_MISSING=true
+  fi
+
+  AC_MSG_CHECKING([if serviceability agent attach should be included])
+  if test "x$enable_sa_attach" = "xyes"; then
+    if test "x$SA_ATTACH_DEP_MISSING" = "xtrue"; then
+      AC_MSG_RESULT([no, missing dependencies])
+      HELP_MSG_MISSING_DEPENDENCY([sa-attach])
+      AC_MSG_ERROR([Cannot enable sa-attach with missing dependencies. See above. $HELP_MSG])
+    else
+      INCLUDE_SA_ATTACH=true
+      AC_MSG_RESULT([yes, forced])
+    fi
+  elif test "x$enable_sa_attach" = "xno"; then
+    INCLUDE_SA_ATTACH=false
+    AC_MSG_RESULT([no, forced])
+  elif test "x$enable_sa_attach" = "xauto" || test "x$enable_sa_attach" = "x"; then
+    if test "x$SA_ATTACH_DEP_MISSING" = "xtrue"; then
+      INCLUDE_SA_ATTACH=false
+      AC_MSG_RESULT([no, missing dependencies])
+    else
+      INCLUDE_SA_ATTACH=true
+      AC_MSG_RESULT([yes, dependencies present])
+    fi
+  else
+    AC_MSG_ERROR([Invalid value for --enable-sa-attach: $enable_sa_attach])
+  fi
+  AC_SUBST(INCLUDE_SA_ATTACH)
+])
+
+###############################################################################
 # Set up all JVM features for each JVM variant.
 #
 AC_DEFUN_ONCE([HOTSPOT_SETUP_JVM_FEATURES],
diff -upr a/common/autoconf/platform.m4 b/common/autoconf/platform.m4
--- a/common/autoconf/platform.m4	2019-02-13 20:03:08.652337196 +0100
+++ b/common/autoconf/platform.m4	2019-02-13 20:03:53.445132820 +0100
@@ -140,6 +140,18 @@ AC_DEFUN([PLATFORM_EXTRACT_VARS_FROM_OS]
       AC_MSG_ERROR([unsupported operating system $1])
       ;;
   esac
+
+  case "$1" in
+    *linux*-musl)
+      VAR_LIBC=musl
+      ;;
+    *linux*-gnu)
+      VAR_LIBC=gnu
+      ;;
+    *)
+      VAR_LIBC=default
+      ;;
+  esac
 ])
 
 # Expects $host_os $host_cpu $build_os and $build_cpu
@@ -178,6 +190,7 @@ AC_DEFUN([PLATFORM_EXTRACT_TARGET_AND_BU
   OPENJDK_BUILD_CPU_ARCH="$VAR_CPU_ARCH"
   OPENJDK_BUILD_CPU_BITS="$VAR_CPU_BITS"
   OPENJDK_BUILD_CPU_ENDIAN="$VAR_CPU_ENDIAN"
+  OPENJDK_BUILD_LIBC="$VAR_LIBC"
   AC_SUBST(OPENJDK_BUILD_OS)
   AC_SUBST(OPENJDK_BUILD_OS_TYPE)
   AC_SUBST(OPENJDK_BUILD_OS_ENV)
@@ -185,10 +198,16 @@ AC_DEFUN([PLATFORM_EXTRACT_TARGET_AND_BU
   AC_SUBST(OPENJDK_BUILD_CPU_ARCH)
   AC_SUBST(OPENJDK_BUILD_CPU_BITS)
   AC_SUBST(OPENJDK_BUILD_CPU_ENDIAN)
+  AC_SUBST(OPENJDK_BUILD_LIBC)
 
   AC_MSG_CHECKING([openjdk-build os-cpu])
   AC_MSG_RESULT([$OPENJDK_BUILD_OS-$OPENJDK_BUILD_CPU])
 
+  if test "x$OPENJDK_BUILD_OS" = "xlinux"; then
+    AC_MSG_CHECKING([openjdk-build C library])
+    AC_MSG_RESULT([$OPENJDK_BUILD_LIBC])
+  fi
+
   # Convert the autoconf OS/CPU value to our own data, into the VAR_OS/CPU variables.
   PLATFORM_EXTRACT_VARS_FROM_OS($host_os)
   PLATFORM_EXTRACT_VARS_FROM_CPU($host_cpu)
@@ -208,6 +227,7 @@ AC_DEFUN([PLATFORM_EXTRACT_TARGET_AND_BU
   OPENJDK_TARGET_CPU_ARCH="$VAR_CPU_ARCH"
   OPENJDK_TARGET_CPU_BITS="$VAR_CPU_BITS"
   OPENJDK_TARGET_CPU_ENDIAN="$VAR_CPU_ENDIAN"
+  OPENJDK_TARGET_LIBC="$VAR_LIBC"
   AC_SUBST(OPENJDK_TARGET_OS)
   AC_SUBST(OPENJDK_TARGET_OS_TYPE)
   AC_SUBST(OPENJDK_TARGET_OS_ENV)
@@ -215,9 +235,15 @@ AC_DEFUN([PLATFORM_EXTRACT_TARGET_AND_BU
   AC_SUBST(OPENJDK_TARGET_CPU_ARCH)
   AC_SUBST(OPENJDK_TARGET_CPU_BITS)
   AC_SUBST(OPENJDK_TARGET_CPU_ENDIAN)
+  AC_SUBST(OPENJDK_TARGET_LIBC)
 
   AC_MSG_CHECKING([openjdk-target os-cpu])
   AC_MSG_RESULT([$OPENJDK_TARGET_OS-$OPENJDK_TARGET_CPU])
+
+  if test "x$OPENJDK_TARGET_OS" = "xlinux"; then
+    AC_MSG_CHECKING([openjdk-target C library])
+    AC_MSG_RESULT([$OPENJDK_TARGET_LIBC])
+  fi
 ])
 
 # Check if a reduced build (32-bit on 64-bit platforms) is requested, and modify behaviour
@@ -353,7 +379,13 @@ AC_DEFUN([PLATFORM_SETUP_LEGACY_VARS_HEL
   else
     OPENJDK_$1_CPU_BUNDLE="$OPENJDK_$1_CPU"
   fi
-  OPENJDK_$1_BUNDLE_PLATFORM="${OPENJDK_$1_OS_BUNDLE}-${OPENJDK_$1_CPU_BUNDLE}"
+
+  OPENJDK_$1_LIBC_BUNDLE=""
+  if test "x$OPENJDK_$1_LIBC" = "xmusl"; then  
+    OPENJDK_$1_LIBC_BUNDLE="-$OPENJDK_$1_LIBC"
+  fi
+
+  OPENJDK_$1_BUNDLE_PLATFORM="${OPENJDK_$1_OS_BUNDLE}-${OPENJDK_$1_CPU_BUNDLE}${OPENJDK_$1_LIBC_BUNDLE}"
   AC_SUBST(OPENJDK_$1_BUNDLE_PLATFORM)
 
   if test "x$OPENJDK_$1_CPU_BITS" = x64; then
@@ -431,6 +463,12 @@ AC_DEFUN([PLATFORM_SETUP_LEGACY_VARS_HEL
   fi
   AC_SUBST(HOTSPOT_$1_CPU_DEFINE)
 
+  if test "x$OPENJDK_$1_LIBC" = "xmusl"; then
+    HOTSPOT_$1_LIBC=$OPENJDK_$1_LIBC
+  else
+    HOTSPOT_$1_LIBC=""
+  fi
+  AC_SUBST(HOTSPOT_$1_LIBC)
 ])
 
 AC_DEFUN([PLATFORM_SET_RELEASE_FILE_OS_VALUES],
diff -upr a/common/autoconf/spec.gmk.in b/common/autoconf/spec.gmk.in
--- a/common/autoconf/spec.gmk.in	2019-02-13 20:59:33.647572189 +0100
+++ b/common/autoconf/spec.gmk.in	2019-02-13 20:03:53.515131983 +0100
@@ -71,6 +71,8 @@ OPENJDK_TARGET_CPU_ARCH:=@OPENJDK_TARGET
 OPENJDK_TARGET_CPU_BITS:=@OPENJDK_TARGET_CPU_BITS@
 OPENJDK_TARGET_CPU_ENDIAN:=@OPENJDK_TARGET_CPU_ENDIAN@
 
+OPENJDK_TARGET_LIBC:=@OPENJDK_TARGET_LIBC@
+
 COMPILE_TYPE:=@COMPILE_TYPE@
 
 # Legacy support
@@ -87,6 +89,8 @@ HOTSPOT_TARGET_CPU := @HOTSPOT_TARGET_CP
 HOTSPOT_TARGET_CPU_ARCH := @HOTSPOT_TARGET_CPU_ARCH@
 HOTSPOT_TARGET_CPU_DEFINE := @HOTSPOT_TARGET_CPU_DEFINE@
 
+HOTSPOT_TARGET_LIBC := @HOTSPOT_TARGET_LIBC@
+
 OPENJDK_TARGET_BUNDLE_PLATFORM:=@OPENJDK_TARGET_BUNDLE_PLATFORM@
 JDK_ARCH_ABI_PROP_NAME := @JDK_ARCH_ABI_PROP_NAME@
 
@@ -101,6 +105,8 @@ OPENJDK_BUILD_CPU_ARCH:=@OPENJDK_BUILD_C
 OPENJDK_BUILD_CPU_BITS:=@OPENJDK_BUILD_CPU_BITS@
 OPENJDK_BUILD_CPU_ENDIAN:=@OPENJDK_BUILD_CPU_ENDIAN@
 
+OPENJDK_BUILD_LIBC:=@OPENJDK_BUILD_LIBC@
+
 # Target platform value in ModuleTarget class file attribute.
 OPENJDK_MODULE_TARGET_PLATFORM:=@OPENJDK_MODULE_TARGET_PLATFORM@
 
@@ -780,6 +786,7 @@ ELF_LIBS:=@ELF_LIBS@
 #
 
 INCLUDE_SA=@INCLUDE_SA@
+INCLUDE_SA_ATTACH=@INCLUDE_SA_ATTACH@
 INCLUDE_GRAAL=@INCLUDE_GRAAL@
 
 OS_VERSION_MAJOR:=@OS_VERSION_MAJOR@
diff -upr a/common/conf/jib-profiles.js b/common/conf/jib-profiles.js
--- a/common/conf/jib-profiles.js
+++ b/common/conf/jib-profiles.js
@@ -58,8 +58,10 @@
  * input.build_id
  * input.target_os
  * input.target_cpu
+ * input.target_libc
  * input.build_os
  * input.build_cpu
+ * input.build_libc
  * input.target_platform
  * input.build_platform
  * // The build_osenv_* variables describe the unix layer on Windows systems,
@@ -99,13 +101,17 @@
  *       target_os; <string>
  *       // Name of cpu the profile is built to run on
  *       target_cpu; <string>
- *       // Combination of target_os and target_cpu for convenience
+ *       // Optional libc string if non standard
+ *       target_libc; <string>
+ *       // Optional combination of target_os and target_cpu for convenience
  *       target_platform; <string>
  *       // Name of os the profile is built on
  *       build_os; <string>
  *       // Name of cpu the profile is built on
  *       build_cpu; <string>
- *       // Combination of build_os and build_cpu for convenience
+ *       // Optional libc string if non standard
+ *       build_libc; <string>
+ *       // Optional combination of build_os and build_cpu for convenience
  *       build_platform; <string>
  *
  *       // List of dependencies needed to build this profile
@@ -230,7 +236,7 @@ var getJibProfilesCommon = function (inp
 
     // List of the main profile names used for iteration
     common.main_profile_names = [
-        "linux-x64", "linux-x86", "macosx-x64", "solaris-x64",
+        "linux-x64", "linux-x64-musl", "linux-x86", "macosx-x64", "solaris-x64",
         "solaris-sparcv9", "windows-x64", "windows-x86",
         "linux-arm64", "linux-arm-vfp-hflt", "linux-arm-vfp-hflt-dyn"
     ];
@@ -391,7 +397,11 @@ var getJibProfilesCommon = function (inp
            boot_jdk_revision = "8u20";
            boot_jdk_subdirpart = "1.8.0_20";
        }
+    } else if (input.build_libc == "musl") {
+       boot_jdk_revision="9-ea+167-2017-05-05-133034.duke.portolajdk9+1.0";
+       boot_jdk_subdirpart="-9";
     }
+
     common.boot_jdk_revision = boot_jdk_revision;
     common.boot_jdk_subdirpart = boot_jdk_subdirpart;
     common.boot_jdk_home = input.get("boot_jdk", "home_path") + "/jdk"
@@ -423,6 +433,14 @@ var getJibProfilesProfiles = function (i
             default_make_targets: ["docs-bundles"],
         },
 
+        "linux-x64-musl": {
+            target_os: "linux",
+            target_cpu: "x64",
+            target_libc: "musl",
+            configure_args: concat(common.configure_args_64bit,
+                "--with-zlib=system"),
+        },
+
         "linux-x86": {
             target_os: "linux",
             target_cpu: "x86",
@@ -666,6 +684,10 @@ var getJibProfilesProfiles = function (i
         "linux-x64": {
             platform: "linux-x64",
         },
+        "linux-x64-musl": {
+            platform: "linux-x64",
+            demo_ext: "tar.gz"
+        },
         "linux-x86": {
             platform: "linux-x86",
         },
@@ -903,8 +925,6 @@ var getJibProfilesProfiles = function (i
     };
     profiles = concatObjects(profiles, profilesRiFreetype);
 
-    // Generate the missing platform attributes
-    profiles = generatePlatformAttributes(profiles);
     profiles = generateDefaultMakeTargetsConfigureArg(common, profiles);
     return profiles;
 };
@@ -934,9 +954,21 @@ var getJibProfilesDependencies = functio
         ? input.target_os + "_x64"
         : input.target_platform);
 
-    var dependencies = {
-
-        boot_jdk: {
+    // the musl version of the JDK is still in development
+    // so the binaries are not located in the same place as
+    // for other platforms
+    var boot_jdk_dep;
+    if (input.build_os == "linux" && input.build_libc == "musl") {
+        boot_jdk_dep = {
+            organization: common.organization,
+            ext: "tar.gz",
+            module: "jdk-" + input.build_platform,
+            revision: common.boot_jdk_revision,
+            configure_args: "--with-boot-jdk=" + common.boot_jdk_home,
+            environment_path: common.boot_jdk_home + "/bin"
+        };
+    } else {
+        boot_jdk_dep = {
             server: "javare",
             module: "jdk",
             revision: common.boot_jdk_revision,
@@ -945,7 +977,19 @@ var getJibProfilesDependencies = functio
                 + "-" + common.boot_jdk_platform + ".tar.gz",
             configure_args: "--with-boot-jdk=" + common.boot_jdk_home,
             environment_path: common.boot_jdk_home + "/bin"
-        },
+        };
+    }
+
+    var gnumake_module;
+    if (input.build_os == "windows") {
+        gnumake_module = "gnumake-" + input.build_osenv_platform;
+    } else {
+        gnumake_module = "gnumake-" + input.build_platform;
+    }
+
+    var dependencies = {
+
+        boot_jdk: boot_jdk_dep,
 
         devkit: {
             organization: common.organization,
@@ -982,9 +1026,7 @@ var getJibProfilesDependencies = functio
             ext: "tar.gz",
             revision: "4.0+1.0",
 
-            module: (input.build_os == "windows"
-                ? "gnumake-" + input.build_osenv_platform
-                : "gnumake-" + input.build_platform),
+            module: gnumake_module,
 
             configure_args: (input.build_os == "windows"
                 ? "MAKE=" + input.get("gnumake", "install_path") + "/cygwin/bin/make"
@@ -1025,27 +1067,6 @@ var getJibProfilesDependencies = functio
 };
 
 /**
- * Generate the missing platform attributes for profiles
- *
- * @param profiles Profiles map to generate attributes on
- * @returns {{}} New profiles map with platform attributes fully filled in
- */
-var generatePlatformAttributes = function (profiles) {
-    var ret = concatObjects(profiles, {});
-    for (var profile in profiles) {
-        if (ret[profile].build_os == null) {
-            ret[profile].build_os = ret[profile].target_os;
-        }
-        if (ret[profile].build_cpu == null) {
-            ret[profile].build_cpu = ret[profile].target_cpu;
-        }
-        ret[profile].target_platform = ret[profile].target_os + "_" + ret[profile].target_cpu;
-        ret[profile].build_platform = ret[profile].build_os + "_" + ret[profile].build_cpu;
-    }
-    return ret;
-};
-
-/**
  * The default_make_targets attribute on a profile is not a real Jib attribute.
  * This function rewrites that attribute into the corresponding configure arg.
  * Calling this function multiple times on the same profiles object is safe.
diff -upr a/make/ReleaseFile.gmk b/make/ReleaseFile.gmk
--- a/make/ReleaseFile.gmk
+++ b/make/ReleaseFile.gmk
@@ -50,6 +50,7 @@ define create-info-file
   $(call info-file-item, "IMPLEMENTOR", "$(COMPANY_NAME)")
   $(call info-file-item, "OS_NAME", "$(RELEASE_FILE_OS_NAME)")
   $(call info-file-item, "OS_ARCH", "$(RELEASE_FILE_OS_ARCH)")
+  $(call info-file-item, "LIBC", "$(OPENJDK_TARGET_LIBC)")
 endef
 
 # Param 1 - The file containing the MODULES list
