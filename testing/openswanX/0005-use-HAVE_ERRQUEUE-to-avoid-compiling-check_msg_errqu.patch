From b781ec8f5629080db0422f84335c975ee0af9a88 Mon Sep 17 00:00:00 2001
From: Michael Richardson <mcr@sandelman.ca>
Date: Fri, 18 Jan 2019 23:39:53 -0500
Subject: [PATCH 5/9] use HAVE_ERRQUEUE to avoid compiling check_msg_errqueue
 on systems/libraries that do not support it

---
 programs/pluto/demux.c  | 5 ++---
 programs/pluto/server.c | 8 ++++----
 2 files changed, 6 insertions(+), 7 deletions(-)

diff --git a/programs/pluto/demux.c b/programs/pluto/demux.c
index 2b2fe4f13..6d055fbb4 100644
--- a/programs/pluto/demux.c
+++ b/programs/pluto/demux.c
@@ -30,8 +30,7 @@
 #include <netinet/in.h>
 #include <arpa/inet.h>
 
-#if defined(IP_RECVERR) && defined(MSG_ERRQUEUE)
-#  include <asm/types.h>	/* for __u8, __u32 */
+#if defined(IP_RECVERR) && defined(MSG_ERRQUEUE) && defined(HAVE_ERRQUEUE)
 #  include <linux/errqueue.h>
 #  include <sys/uio.h>	/* struct iovec */
 #endif
@@ -201,7 +200,7 @@ comm_handle(const struct iface_port *ifp)
 {
     static struct msg_digest *md;
 
-#if defined(IP_RECVERR) && defined(MSG_ERRQUEUE)
+#if defined(IP_RECVERR) && defined(MSG_ERRQUEUE) && defined(HAVE_ERRQUEUE)
     /* Even though select(2) says that there is a message,
      * it might only be a MSG_ERRQUEUE message.  At least
      * sometimes that leads to a hanging recvfrom.  To avoid
diff --git a/programs/pluto/server.c b/programs/pluto/server.c
index f1e88ba45..9a27f8af2 100644
--- a/programs/pluto/server.c
+++ b/programs/pluto/server.c
@@ -46,7 +46,7 @@
 #include <sys/wait.h>
 #include <resolv.h>
 
-#if defined(IP_RECVERR) && defined(MSG_ERRQUEUE)
+#if defined(IP_RECVERR) && defined(MSG_ERRQUEUE) && defined(HAVE_ERRQUEUE)
 #  include <linux/errqueue.h>
 #  include <sys/uio.h>	/* struct iovec */
 #endif
@@ -359,7 +359,7 @@ create_socket(struct raw_iface *ifp, const char *v_name, int port)
     }
 
     /* To improve error reporting.  See ip(7). */
-#if defined(IP_RECVERR) && defined(MSG_ERRQUEUE)
+#if defined(IP_RECVERR) && defined(MSG_ERRQUEUE) && defined(HAVE_ERRQUEUE)
     if (setsockopt(fd, SOL_IP, IP_RECVERR
     , (const void *)&on, sizeof(on)) < 0)
     {
@@ -855,7 +855,7 @@ call_server(void)
  *   POLLOUT; this should be benign for POLLIN).
  */
 
-#if defined(IP_RECVERR) && defined(MSG_ERRQUEUE)
+#if defined(IP_RECVERR) && defined(MSG_ERRQUEUE) && defined(HAVE_ERRQUEUE)
 bool
 check_msg_errqueue(const struct iface_port *ifp, short interest)
 {
@@ -1133,7 +1133,7 @@ send_packet(struct state *st, const char *where, bool verbose)
 
     setportof(htons(st->st_remoteport), &st->st_remoteaddr);
 
-#if defined(IP_RECVERR) && defined(MSG_ERRQUEUE)
+#if defined(IP_RECVERR) && defined(MSG_ERRQUEUE) && defined(HAVE_ERRQUEUE)
     (void) check_msg_errqueue(st->st_interface, POLLOUT);
 #endif /* defined(IP_RECVERR) && defined(MSG_ERRQUEUE) */
 
-- 
2.11.0

