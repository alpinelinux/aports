From d5e0a79ec207c92de1d28e6b8a23c814b42edd1b Mon Sep 17 00:00:00 2001
From: Andreas Sundqvist <andreas@forme.se>
Date: Thu, 23 Jun 2016 11:32:14 +0200
Subject: [PATCH] Make extension work on php7

---
 php/libpuzzle/libpuzzle.c | 62 ++++++++++++++++-----------------------
 1 file changed, 25 insertions(+), 37 deletions(-)

diff --git a/php/libpuzzle/libpuzzle.c b/php/libpuzzle/libpuzzle.c
index 82e84c3..21fea15 100644
--- a/php/libpuzzle/libpuzzle.c
+++ b/php/libpuzzle/libpuzzle.c
@@ -121,23 +121,20 @@ PHP_MINFO_FUNCTION(libpuzzle)
  * Creates a signature out of an image file */
 PHP_FUNCTION(puzzle_fill_cvec_from_file)
 {    
-    char *arg = NULL;
-    int arg_len;
+    zend_string *arg = NULL;
     PuzzleContext *context;
     PuzzleCvec cvec;
     
     context = &LIBPUZZLE_G(global_context);
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,
-                              "s", &arg, &arg_len) == FAILURE ||
-        arg_len <= 0) {
+    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "S", &arg) == FAILURE) {
         RETURN_FALSE;
     }
     puzzle_init_cvec(context, &cvec);
-    if (puzzle_fill_cvec_from_file(context, &cvec, arg) != 0) {
+    if (puzzle_fill_cvec_from_file(context, &cvec, arg->val) != 0) {
         puzzle_free_cvec(context, &cvec);
         RETURN_FALSE;
     }
-    RETVAL_STRINGL(cvec.vec, cvec.sizeof_vec, 1);
+    RETVAL_STRINGL(cvec.vec, cvec.sizeof_vec);
     puzzle_free_cvec(context, &cvec);
 }
 /* }}} */
@@ -146,33 +143,29 @@ PHP_FUNCTION(puzzle_fill_cvec_from_file)
  * Compress a signature to save storage space */
 PHP_FUNCTION(puzzle_compress_cvec)
 {    
-    char *arg = NULL;
-    int arg_len;
+    zend_string *arg = NULL;
     PuzzleContext *context;
     PuzzleCompressedCvec compressed_cvec;
     PuzzleCvec cvec;
     
     context = &LIBPUZZLE_G(global_context);
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,
-                              "s", &arg, &arg_len) == FAILURE ||
-        arg_len <= 0) {
+    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "S", &arg) == FAILURE) {
         RETURN_FALSE;
     }
     puzzle_init_compressed_cvec(context, &compressed_cvec);
     puzzle_init_cvec(context, &cvec);
-    cvec.vec = arg;
-    cvec.sizeof_vec = (size_t) arg_len;    
+    cvec.vec = arg->val;
+    cvec.sizeof_vec = (size_t) arg->len;
     if (puzzle_compress_cvec(context, &compressed_cvec, &cvec) != 0) {
         puzzle_free_compressed_cvec(context, &compressed_cvec);
         cvec.vec = NULL;
         puzzle_free_cvec(context, &cvec);        
         RETURN_FALSE;
     }
-    RETVAL_STRINGL(compressed_cvec.vec,
-                   compressed_cvec.sizeof_compressed_vec, 1);
+    RETVAL_STRINGL(compressed_cvec.vec, compressed_cvec.sizeof_compressed_vec);
     puzzle_free_compressed_cvec(context, &compressed_cvec);
     cvec.vec = NULL;
-    puzzle_free_cvec(context, &cvec);    
+    puzzle_free_cvec(context, &cvec);
 }
 /* }}} */
 
@@ -180,29 +173,26 @@ PHP_FUNCTION(puzzle_compress_cvec)
  * Uncompress a compressed signature so that it can be used for computations */
 PHP_FUNCTION(puzzle_uncompress_cvec)
 {    
-    char *arg = NULL;
-    int arg_len;
+    zend_string *arg = NULL;
     PuzzleContext *context;
     PuzzleCompressedCvec compressed_cvec;
     PuzzleCvec cvec;
     
     context = &LIBPUZZLE_G(global_context);
-    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC,
-                              "s", &arg, &arg_len) == FAILURE ||
-        arg_len <= 0) {
+    if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "S", &arg) == FAILURE) {
         RETURN_FALSE;
     }
     puzzle_init_compressed_cvec(context, &compressed_cvec);
     puzzle_init_cvec(context, &cvec);
-    compressed_cvec.vec = arg;
-    compressed_cvec.sizeof_compressed_vec = (size_t) arg_len;    
+    compressed_cvec.vec = arg->val;
+    compressed_cvec.sizeof_compressed_vec = (size_t) arg->len;
     if (puzzle_uncompress_cvec(context, &compressed_cvec, &cvec) != 0) {
         puzzle_free_cvec(context, &cvec);
         compressed_cvec.vec = NULL;
         puzzle_free_compressed_cvec(context, &compressed_cvec);
         RETURN_FALSE;
     }
-    RETVAL_STRINGL(cvec.vec, cvec.sizeof_vec, 1);
+    RETVAL_STRINGL(cvec.vec, cvec.sizeof_vec);
     puzzle_free_cvec(context, &cvec);
     compressed_cvec.vec = NULL;
     puzzle_free_compressed_cvec(context, &compressed_cvec);    
@@ -213,8 +203,7 @@ PHP_FUNCTION(puzzle_uncompress_cvec)
  * Computes the distance between two signatures. Result is between 0.0 and 1.0 */
 PHP_FUNCTION(puzzle_vector_normalized_distance)
 {    
-    char *vec1 = NULL, *vec2 = NULL;
-    int vec1_len, vec2_len;
+    zend_string *vec1 = NULL, *vec2 = NULL;
     PuzzleContext *context;
     PuzzleCvec cvec1, cvec2;
     double d;
@@ -222,9 +211,8 @@ PHP_FUNCTION(puzzle_vector_normalized_distance)
     
     context = &LIBPUZZLE_G(global_context);
     if (zend_parse_parameters
-        (ZEND_NUM_ARGS() TSRMLS_CC, "ss|b",
-         &vec1, &vec1_len, &vec2, &vec2_len, &fix_for_texts) == FAILURE ||
-        vec1_len <= 0 || vec2_len <= 0) {
+        (ZEND_NUM_ARGS() TSRMLS_CC, "SS|b",
+        &vec1, &vec2, &fix_for_texts) == FAILURE) {
         RETURN_FALSE;
     }
     if (ZEND_NUM_ARGS() TSRMLS_CC < 3) {
@@ -232,10 +220,10 @@ PHP_FUNCTION(puzzle_vector_normalized_distance)
     }
     puzzle_init_cvec(context, &cvec1);
     puzzle_init_cvec(context, &cvec2);    
-    cvec1.vec = vec1;
-    cvec1.sizeof_vec = (size_t) vec1_len;
-    cvec2.vec = vec2;
-    cvec2.sizeof_vec = (size_t) vec2_len;
+    cvec1.vec = vec1->val;
+    cvec1.sizeof_vec = (size_t) vec1->len;
+    cvec2.vec = vec2->val;
+    cvec2.sizeof_vec = (size_t) vec2->len;
     d = puzzle_vector_normalized_distance(context, &cvec1, &cvec2,
                                           (int) fix_for_texts);
     cvec1.vec = cvec2.vec = NULL;
@@ -250,7 +238,7 @@ PHP_FUNCTION(puzzle_vector_normalized_distance)
 PHP_FUNCTION(puzzle_set_max_width)
 {
     PuzzleContext *context;
-    long width;
+    zend_long width;
     
     context = &LIBPUZZLE_G(global_context);
     if (zend_parse_parameters
@@ -270,7 +258,7 @@ PHP_FUNCTION(puzzle_set_max_width)
 PHP_FUNCTION(puzzle_set_max_height)
 {
     PuzzleContext *context;
-    long height;
+    zend_long height;
     
     context = &LIBPUZZLE_G(global_context);
     if (zend_parse_parameters
@@ -290,7 +278,7 @@ PHP_FUNCTION(puzzle_set_max_height)
 PHP_FUNCTION(puzzle_set_lambdas)
 {
     PuzzleContext *context;
-    long lambdas;
+    zend_long lambdas;
     
     context = &LIBPUZZLE_G(global_context);
     if (zend_parse_parameters
