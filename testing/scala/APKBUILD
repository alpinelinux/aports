# Contributor: norbjd
# Maintainer: norbjd <norbjd@users.noreply.github.com>
pkgname=scala
pkgver=2.12.2
pkgrel=0
pkgdesc="The Scala Programming Language"
url="http://scala-lang.org"
arch="all"
license="BSD3"

# openjdk8-jre  : needed for execution 
depends="bash openjdk8-jre"

# openjdk8  : needed for sbt + compilation
# sbt       : needed for compilation
# graphviz  : needed for diagrams generation in HTML scaladoc
makedepends="openjdk8 sbt graphviz"

# documentation is separated
subpackages="$pkgname-doc"

source="$pkgname-$pkgver.tar.gz::https://github.com/$pkgname/$pkgname/archive/v$pkgver.tar.gz"
builddir="$srcdir/$pkgname-$pkgver"

# important directories
_scala_home="/usr/share/$pkgname-$pkgver"
_scala_docs_home="/usr/share/doc/$pkgname-$pkgver"

# sbt command with JVM options (memory, to avoid OOM errors)
_sbt() {
    sbt -Xms2G -Xmx4G -XX:MaxMetaspaceSize=1G "$@"
}

build() {
    cd "$builddir"

    # use sbt to compile, package, and create doc
    _sbt ';dist/mkPack;doc;compile:managedResources;packageDoc'
}

check() {
    cd "$builddir"

    # check if all scripts have been created and work
    ./build/pack/bin/scala -version
    ./build/pack/bin/scalac -version
    ./build/pack/bin/scaladoc -version
    ./build/pack/bin/scalap -version
    ./build/pack/bin/fsc -version
}

package() {
    cd "$builddir"

    # copy scripts
    mkdir -p "$pkgdir/$_scala_home"
    cp -R build/pack/* "$pkgdir/$_scala_home"

    # remove useless specific Windows scripts
    rm "$pkgdir/$_scala_home"/bin/*.bat

    # create symbolic links
    mkdir -p "$pkgdir"/usr/bin

#    local _bin
#    for _bin in "$pkgdir/$_scala_home"/bin/*
#    do
#        local _bin_basename=$(basename "$_bin")
#        ln -sf "$_scala_home"/bin/"$_bin_basename" "$pkgdir"/usr/bin/"$_bin_basename"
#    done
    
    ls "$pkgdir/$_scala_home"/bin/ | \
    xargs -I_bin \
        ln -sf "$_scala_home"/bin/_bin "$pkgdir"/usr/bin/_bin
}

man_doc() {
    cd "$builddir"

    mkdir -p "$subpkgdir"/usr/share/man/man1

    # copy manpages for scripts
#    local _manfile
#    for _manfile in $(find "$builddir"/target/scala-dist/resource_managed/main/man/man1/ -type f)
#    do
#        gzip "$_manfile"
#        cp "$_manfile".gz "$subpkgdir"/usr/share/man/man1
#    done

    find "$builddir"/target/scala-dist/resource_managed/main/man/man1/ -type f \
        -exec gzip {} \; \
        -exec cp {}.gz "$subpkgdir"/usr/share/man/man1 \;
}

html_doc() {
    cd "$builddir"

    mkdir -p "$subpkgdir/$_scala_docs_home"
    mkdir -p "$subpkgdir/$_scala_docs_home"/api
    mkdir -p "$subpkgdir/$_scala_docs_home"/api/jars
    mkdir -p "$subpkgdir/$_scala_docs_home"/tools

    # copy default doc resources (licenses, README)
    cp -R "$builddir"/doc/* "$subpkgdir/$_scala_docs_home"/
    
    # copy HTML scaladoc for default API
    cp -R "$builddir"/build/scaladoc/compiler   "$subpkgdir/$_scala_docs_home"/api/compiler
    cp -R "$builddir"/build/scaladoc/library    "$subpkgdir/$_scala_docs_home"/api/library
    cp -R "$builddir"/build/scaladoc/reflect    "$subpkgdir/$_scala_docs_home"/api/reflect
    cp -R "$builddir"/build/scaladoc/scalap     "$subpkgdir/$_scala_docs_home"/api/scalap

    # copy HTML doc for tools (scripts)
    cp -R "$builddir"/src/manual/scala/tools/docutil/resources/* "$subpkgdir/$_scala_docs_home"/tools/
    cp "$builddir"/target/scala-dist/resource_managed/main/doc/tools/* "$subpkgdir/$_scala_docs_home"/tools/
}

jar_doc() {
    cd "$builddir"

    # copy javadoc JARs
#    local _javadoc_jar
#    for _javadoc_jar in $(find "$builddir"/target/ -type f -name '*-javadoc.jar')
#    do
#        cp "$_javadoc_jar" "$subpkgdir"/$_scala_docs_home/api/jars/
#    done

    find "$builddir"/target/ -type f -name '*-javadoc.jar' \
        -exec cp {} "$subpkgdir"/$_scala_docs_home/api/jars \;
}

doc() {
    cd "$builddir"

    default_doc
    man_doc

    html_doc
    jar_doc
}

sha512sums="ab450e94fa79a9a0af238567b17537b12f23627eb066b84cd996a88422ec34ee8d26e09eca0416d49daccadaeb016ad6419d8022d471065389a26b024f2049b1  scala-2.12.2.tar.gz"
