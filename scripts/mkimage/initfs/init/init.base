#!/bin/sh

# Helper functions:

# Status printing and logging
printlog() {
	$QUIET || printf "%s" "$@"
	[ "$initlog" ] && printf "%s" "$@" >> "$initlog"
}

msg() { printlog "%s\n" "$@" ; }
info() { printlog "info: %s\n" $@ ; }
warn() { QUIET="false" ; initfs_init_exit_splash ; printlog "WARNING: %s\n" $@ ; }
error() { QUIET="false" ; initfs_init_exit_splash ; printlog "ERROR: %s\n" $@ ; }

# Variable tools
setvar() { eval "$1=\"\$$2\"" ; }
getvar() { eval "printf '%s' \"\$$1\"" ; }
append() { eval "$1=\"\${$1:+\$$1 }$@\"" ; }


# Start an emergency shell which attempts to continue booting upon exit.
initfs_init_start_emergency_shell() {
	msg "Launching emergency recovery shell."
	msg "Type 'exit' to continue booting after fixing."
	/bin/busybox sh
}

# exec an emergency shell which reboots the machine upon exit.
initfs_init_exec_emergency_shell() {
	msg "Launching emergency recovery shell."
	msg "Type 'exit' to reboot."
	exec /bin/busybox sh
	reboot
}



initfs_init_handles_options() {
	if [ ! "$initfs_init_handled_opts" ] ; then
		append initfs_init_handled_opts \
			"s single 1
			console
			quiet
			debug_init 
	
			modules 
			blacklist

		root
		root_size
		rootfstype
		rootflags

		overlaytmpfs

		alpine_dev
		alpine_start
		alpine_repo
		
		apkovl
		ovl_dev 
		keep_apk_new 
		pkgs

		autodetect
		autoraid
		splash

		cryptroot 
		cryptdm 
		
		dma 
		usbdelay
		
		init_args 


		ip
		nbd

		resume
		"

	[ "$@" ] && append initfs_init_handled_kernel_opts "$@"
}


# Exit splash on given flag if specified otherwise unconditionally if splash is enabled.
initfs_init_exit_splash() {
	if [ "$1" ] && [ "$OPT_splash" = "$1" ] ; then echo exit > $sysroot/$splashfile 
	elif [ "$OPT_splash" != "no" ] ; then echo exit > $sysroot/$splashfile ; fi
}
initfs_init_parse_kernel_options() {
	set -- $(cat /proc/cmdline)
	local opt
	for opt; do
		for handled in $init_handled_kernel_opts ; do
			case "$opt" in
				s|single|1)	OPT_single="yes" ;;
				nos|nosingle|no1)	OPT_single="no" ;;
				console=*)	append OPT_console "${opt#console=}" ;;
				$handled=*)	eval "OPT_${handled}=\"${opt#*=}\"" ;;
				$handled)	eval "OPT_${handled}=\"yes\"" ;;
				no$handled)	eval "OPT_${handled}=\"no\"" ;;
			esac
		done
	done
}


initramfs_init() {
	append basedirs "/proc /sys /dev /run /tmp /media/cdrom /mediau/usb /usr/bin /usr/sbin $sysroot"
	for d in $basedirs ; do /bin/busybox mkdir -p $d ; done

	/bin/busybox --install -s

	# basic environment
	export PATH=/usr/bin:/bin:/usr/sbin:/sbin


	# make sure /dev/null is setup correctly
	[ -f /dev/null ] && rm -f /dev/null
	[ -c /dev/null ] || mknod -m 666 /dev/null c 1 3

	# make sure /dev/kmsg is setup correctly
	[ -f /dev/kmsg ] && rm -f /dev/kmsg
	[ -c /dev/kmsg ] || mknod -m 660 /dev/kmsg c 1 11

	# basic mounts
	mount -t proc -o noexec,nosuid,nodev proc /proc
	mount -t sysfs -o noexec,nosuid,nodev sysfs /sys

	# setup /dev
	mount -t devtmpfs -o exec,nosuid,mode=0755,size=2M devtmpfs /dev 2>/dev/null \
		|| mount -t tmpfs -o exec,nosuid,mode=0755,size=2M tmpfs /dev
	[ -d /dev/pts ] || mkdir -m 755 /dev/pts
	[ -c /dev/ptmx ] || mknod -m 666 /dev/ptmx c 5 2
	mount -t devpts -o gid=5,mode=0620,noexec,nosuid devpts /dev/pts
	[ -d /dev/shm ] || mkdir /dev/shm
	mount -t tmpfs -o nodev,nosuid,noexec shm /dev/shm
}


# triggerd by OPT_modules and/or OPT_rootfstype
initfs_init_load_modules() {
	# load available drivers to get access to modloop media
	ebegin "Loading boot drivers"

	modprobe -a $(echo "$OPT_modules $OPT_rootfstype" | tr ',' ' ' ) loop squashfs 2> /dev/null
	if [ -f /etc/modules ] ; then
		sed 's/\#.*//g' < /etc/modules |
		local module args
		while read module args; do
			modprobe -q $module $args
		done
	fi
	eend 0
}

# Belongs to cryptroot feature
initfs_init_handle_opt_cryptroot() {
	if [ -n "$OPT_cryptroot" ]; then
		cryptopts="-c ${OPT_cryptroot}"
		if [ -n "$OPT_cryptdm" ]; then
			cryptopts="$cryptopts -m ${OPT_cryptdm}"
		fi
	fi
}

# Belongs to nbd feature
initfs_init_handle_opt_nbd() {
	if [ -n "$OPT_nbd" ]; then
		configure_ip && setup_nbd || warning "Failed to setup nbd device."
	fi
}


# enable debugging if requested
initfs_init_handle_opt_debug_init() {
	[ -n "$OPT_debug_init" ] && QUIET="false" && set -x
}

# hide init and kernel messages
initfs_init_handle_opt_quiet() {
	[ "$OPT_quiet" = yes ] && append apkflags "--quiet" && QUIET="true" && dmesg -n 1
}

initfs_init_handle_opt_blacklist() {
	# optional blacklist
	for i in ${OPT_blacklist/,/ }; do
		echo "blacklist $i" >> /etc/modprobe.d/boot-opt-blacklist.conf
	done
}


# tmpfs sysroot
initfs_init_handle_opt_root_size() {
	if [ "$OPT_root_size" ]; then
		echo "WARNING: the boot option root_size is deprecated. Use rootflags instead"
		rootflags="${rootflags:-mode=0755},size=$OPT_root_size"
	fi
}

initfs_init_handle_opt_rootflags() {
	[ "$OPT_rootflags" ] && rootflags="${rootflags:-mode=0755},$OPT_rootflags"
}

# Belongs with ata drivers
initfs_init_handle_opt_dma() {
	# dma can be problematic
	if [ "$OPT_dma" = no ]; then
		modprobe libata dma=0
	fi
}

initfs_init_handle_opt_alpine_repo() {
	# The following values are supported:
	#   alpine_repo=auto         -- default, search for .boot_repository
	#   alpine_repo=http://...   -- network repository
	ALPINE_REPO=${OPT_alpine_repo}
	[ "$ALPINE_REPO" = "auto" ] && ALPINE_REPO=

	if [ -n "$ALPINE_REPO" ]; then
		repoopts="-n"
	else
		repoopts="-b $repofile"
	fi
}
