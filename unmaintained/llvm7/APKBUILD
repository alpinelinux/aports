# Contributor: Martell Malone <martell@marinelayer.io>
# Contributor: Travis Tilley <ttilley@gmail.com>
# Contributor: Mitch Tishmack <mitch.tishmack@gmail.com>
# Contributor: Jakub Jirutka <jakub@jirutka.cz>
# Maintainer: Natanael Copa <ncopa@alpinelinux.org>
_pkgname=llvm
pkgver=7.1.0
_majorver=${pkgver%%.*}
pkgname=$_pkgname$_majorver
pkgrel=0
pkgdesc="Low Level Virtual Machine compiler system, version $_majorver"
arch="all"
url="https://llvm.org/"
license="NCSA"
depends_dev="$pkgname=$pkgver-r$pkgrel"
makedepends="binutils-dev chrpath cmake file libffi-dev paxmark python3 zlib-dev"
subpackages="$pkgname-static $pkgname-libs $pkgname-dev $pkgname-test-utils:_test_utils"
source="https://llvm.org/releases/$pkgver/llvm-$pkgver.src.tar.xz
	disable-FileSystemTest.CreateDir-perms-assert.patch
	0001-Disable-dynamic-lib-tests-for-musl-s-dlclose-is-noop.patch
	fix-memory-mf_exec-on-aarch64.patch
	fix-LLVMConfig-cmake-install-prefix.patch
	python3-test.patch
	rust.patch
	"
builddir="$srcdir/$_pkgname-$pkgver.src"
options="!checkroot"

# ARM has few failures in test suite that we don't care about currently and
# also it takes forever to run them on the builder.
case "$CARCH" in
	arm*) options="$options !check";;
esac

# Whether is this package the default (latest) LLVM version.
_default_llvm="no"

if [ "$_default_llvm" = yes ]; then
	provides="llvm=$pkgver-r$pkgrel"
	replaces="llvm"
fi

# NOTE: It seems that there's no (sane) way how to change includedir, sharedir
# etc. separately, just the CMAKE_INSTALL_PREFIX. Standard CMake variables and
# even  LLVM-specific variables, that are related to these paths, actually
# don't work (in llvm 3.7).
#
# When building a software that depends on LLVM, utility llvm-config should be
# used to discover where is LLVM installed. It provides options to print
# path of bindir, includedir, and libdir separately, but in its source, all
# these paths are actually hard-coded against INSTALL_PREFIX. We can patch it
# and move paths manually, but I'm really not sure what it may break...
#
# Also note that we should *not* add version suffix to files in llvm bindir!
# It breaks build system of some software that depends on LLVM, because they
# don't expect these files to have a sufix.
#
# So, we install all the LLVM files into /usr/lib/llvm$_majorver.
# BTW, Fedora and Debian do the same thing.
#
_prefix="usr/lib/llvm$_majorver"

prepare() {
	default_prepare
	cd "$builddir"
	mkdir -p "$builddir"/build
}

build() {
	cd "$builddir"/build

	# Auto-detect it by guessing either.
	local ffi_include_dir="$(pkg-config --cflags-only-I libffi | sed 's|^-I||g')"

	cmake -Wno-dev \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCMAKE_C_FLAGS_MINSIZEREL_INIT="$CFLAGS" \
		-DCMAKE_CXX_FLAGS_MINSIZEREL_INIT="$CXXFLAGS" \
		-DCMAKE_EXE_LINKER_FLAGS_MINSIZEREL_INIT="$LDFLAGS" \
		-DCMAKE_INSTALL_PREFIX=/$_prefix \
		\
		-DFFI_INCLUDE_DIR="$ffi_include_dir" \
		-DLLVM_BINUTILS_INCDIR=/usr/include \
		-DLLVM_BUILD_DOCS=OFF \
		-DLLVM_BUILD_EXAMPLES=OFF \
		-DLLVM_BUILD_EXTERNAL_COMPILER_RT=ON \
		-DLLVM_BUILD_LLVM_DYLIB=ON \
		-DLLVM_BUILD_TESTS=ON \
		-DLLVM_DEFAULT_TARGET_TRIPLE="$CBUILD" \
		-DLLVM_ENABLE_ASSERTIONS=OFF \
		-DLLVM_ENABLE_CXX1Y=ON \
		-DLLVM_ENABLE_FFI=ON \
		-DLLVM_ENABLE_LIBCXX=OFF \
		-DLLVM_ENABLE_PIC=ON \
		-DLLVM_ENABLE_RTTI=ON \
		-DLLVM_ENABLE_SPHINX=OFF \
		-DLLVM_ENABLE_TERMINFO=ON \
		-DLLVM_ENABLE_ZLIB=ON \
		-DLLVM_HOST_TRIPLE="$CHOST" \
		-DLLVM_INCLUDE_EXAMPLES=OFF \
		-DLLVM_LINK_LLVM_DYLIB=ON \
		-DLLVM_TARGETS_TO_BUILD='X86;ARM;AArch64;PowerPC;SystemZ;AMDGPU;NVPTX;Mips;BPF' \
		-DLLVM_APPEND_VC_REV=OFF \
		"$builddir"

	make llvm-tblgen
	make

	paxmark m \
		bin/llvm-rtdyld \
		bin/lli \
		bin/lli-child-target \
		unittests/ExecutionEngine/MCJIT/MCJITTests \
		unittests/ExecutionEngine/Orc/OrcJITTests \
		unittests/Support/SupportTests

	python3 ../utils/lit/setup.py build
}

check() {
	cd "$builddir"/build

	make check-llvm
}

package() {
	cd "$builddir"/build

	make DESTDIR="$pkgdir" install

	cd "$pkgdir"/$_prefix

	# Remove RPATHs.
	file lib/*.so bin/* \
		| awk -F: '$2~/ELF/{print $1}' \
		| xargs -r chrpath -d

	# Symlink files from /usr/lib/llvm*/bin to /usr/bin.
	mkdir -p "$pkgdir"/usr/bin
	local name newname path
	for path in bin/*; do
		name=${path##*/}
		# Add version infix/suffix to the executable name.
		case "$name" in
			llvm-*) newname="llvm$_majorver-${name#llvm-}";;
			*) newname="$name$_majorver";;
		esac
		# If this package provides=llvm (i.e. it's the default/latest
		# llvm package), omit version infix/suffix.
		if [ "$_default_llvm" = yes ]; then
			newname=$name
		fi
		case "$name" in
			FileCheck | obj2yaml | yaml2obj) continue;;
		esac
		ln -s ../lib/llvm$_majorver/bin/$name "$pkgdir"/usr/bin/$newname
	done

	# Move /usr/lib/$pkgname/include/ into /usr/include/$pkgname/
	# and symlink it back.
	_mv include/* "$pkgdir"/usr/include/$pkgname/
	rmdir include
	ln -s ../../include/$pkgname include

	# Move /usr/lib/$pkgname/lib/cmake/llvm/ into /usr/lib/cmake/$pkgname/
	# and symlink it back.
	_mv lib/cmake/llvm/* "$pkgdir"/usr/lib/cmake/$pkgname/
	rmdir lib/cmake/llvm
	ln -s ../../../cmake/$pkgname lib/cmake/llvm
}

static() {
	pkgdesc="LLVM $_majorver static libraries"
	_common_subpkg

	_mv "$pkgdir"/$_prefix/lib/*.a "$subpkgdir"/$_prefix/lib/
}

libs() {
	pkgdesc="LLVM $_majorver runtime library"
	local soname="libLLVM-$_majorver.1.so"
	local soname2="libLLVM-$pkgver.so"

	mkdir -p "$subpkgdir"
	cd "$subpkgdir"

	# libLLVM should be in /usr/lib. This is needed for binaries that are
	# dynamically linked with libLLVM, so they can find it on default path.
	_mv "$pkgdir"/$_prefix/lib/$soname usr/lib/
	ln -s $soname usr/lib/$soname2

	# And also symlink it back to the LLVM prefix.
	mkdir -p $_prefix/lib
	ln -s ../../$soname $_prefix/lib/$soname
	ln -s ../../$soname $_prefix/lib/$soname2
}

dev() {
	_common_subpkg
	default_dev
	cd "$subpkgdir"

	_mv "$pkgdir"/$_prefix/lib $_prefix/
	_mv "$pkgdir"/$_prefix/include $_prefix/

	_mv "$pkgdir"/$_prefix/bin/llvm-config $_prefix/bin/

	if [ "$_default_llvm" = yes ]; then
		ln -sf llvm$_majorver/lib/LLVMgold.so usr/lib/
		ln -sf llvm$_majorver/lib/libLTO.so usr/lib/
		ln -sf llvm$_majorver usr/lib/cmake/llvm
	fi
}

_test_utils() {
	pkgdesc="LLVM $_majorver utilities for executing LLVM and Clang style test suites"
	depends="python3 py3-setuptools"
	_common_subpkg
	replaces=""

	local litver=$(python3 "$builddir"/utils/lit/setup.py --version 2>/dev/null \
		| sed 's/\.dev.*$//')
	test -n "$litver"
	provides="$provides lit=$litver-r$pkgrel"

	cd "$builddir"/build

	install -D -m 755 bin/count "$subpkgdir"/$_prefix/bin/count
	install -D -m 755 bin/FileCheck "$subpkgdir"/$_prefix/bin/FileCheck
	install -D -m 755 bin/not "$subpkgdir"/$_prefix/bin/not

	python3 ../utils/lit/setup.py install --prefix=/usr --root="$subpkgdir"
	ln -s ../../../bin/lit "$subpkgdir"/$_prefix/bin/lit
}

_common_subpkg() {
	if [ "$_default_llvm" = yes ]; then
		replaces="llvm${subpkgname#$pkgname}"
		provides="$replaces=$pkgver-r$pkgrel"
	fi
}

_mv() {
	local dest; for dest; do true; done  # get last argument
	mkdir -p "$dest"
	mv $@
}

sha512sums="a7dbd5693d1f2dae6b6e52893a100f9349cbfcfb25c5fdcad46364acbff0dbd3573f8fbc026c68eb9fd56335198aa94b866cc3dd7ea0cbd2cbfb5f8fe3444a7a  llvm-7.1.0.src.tar.xz
49c47f125014b60d0ea7870f981a2c1708ad705793f89287ed846ee881a837a4dc0170bf467e03f2ef56177473128945287749ac80dc2d13cfabcf8b929ba58a  disable-FileSystemTest.CreateDir-perms-assert.patch
695502bd3b5454c2f5630c59a8cf5f8aeb0deac16a76a8a4df34849e1e35c12ed4234572a320fe4c7e96f974f572f429eb816c5aa3dcfb17057f550eac596495  0001-Disable-dynamic-lib-tests-for-musl-s-dlclose-is-noop.patch
c9ef3cd95c4bd1d6ac69bbcd471b01755126d00f59d27d4a2a2ef5623943be73f8407e2fd731294d1a9d81a66e459f45f3f1d5dc5f9646f4f2fb2d8d891b5279  fix-memory-mf_exec-on-aarch64.patch
7d4825d16107e56a14b7b05be847f03d75e2e05952bea0742a1233b5b0441c9934d8058e612abb6471272884372d9bfd3348355fbd3c19cba82a554003cc3eec  fix-LLVMConfig-cmake-install-prefix.patch
53cc0d13dd871e9b775bb4e7567de4f9a97d91b8246cd7ce74607fd88d6e3e2ab9455f5b4195bc7f9dbdedbc77d659d43e98ec0b7cd78cd395aaea6919510287  python3-test.patch
a59417fe9eecb1a134763092a1db99abbd3a0e0960a6c199a3acdb610e4ae71f2619023cf35c130973776ff3d6f5fc7d9a38c592b64789828b68eaef6000bd80  rust.patch"
