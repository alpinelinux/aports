diff --git a/spec/aarch64_alpine_linux_musl.rs b/spec/aarch64_alpine_linux_musl.rs
new file mode 100644
index 0000000..675cccb
--- /dev/null
+++ b/spec/aarch64_alpine_linux_musl.rs
@@ -0,0 +1,13 @@
+use crate::spec::TargetResult;
+
+pub fn target() -> TargetResult {
+    let mut base = super::aarch64_unknown_linux_musl::target()?;
+
+    base.llvm_target = "aarch64-alpine-linux-musl".to_string();
+    base.target_vendor = "alpine".to_string();
+    base.options.crt_static_default = false;
+    base.options.static_position_independent_executables = true;
+    base.options.need_rpath = true;
+
+    Ok(base)
+}
diff --git a/spec/armv6_alpine_linux_musleabihf.rs b/spec/armv6_alpine_linux_musleabihf.rs
new file mode 100644
index 0000000..1840fc9
--- /dev/null
+++ b/spec/armv6_alpine_linux_musleabihf.rs
@@ -0,0 +1,13 @@
+use crate::spec::TargetResult;
+
+pub fn target() -> TargetResult {
+    let mut base = super::arm_unknown_linux_musleabihf::target()?;
+
+    base.llvm_target = "armv6-alpine-linux-musleabihf".to_string();
+    base.target_vendor = "alpine".to_string();
+    base.options.crt_static_default = false;
+    base.options.static_position_independent_executables = true;
+    base.options.need_rpath = true;
+
+    Ok(base)
+}
diff --git a/spec/armv7_alpine_linux_musleabihf.rs b/spec/armv7_alpine_linux_musleabihf.rs
new file mode 100644
index 0000000..85ec005
--- /dev/null
+++ b/spec/armv7_alpine_linux_musleabihf.rs
@@ -0,0 +1,13 @@
+use crate::spec::TargetResult;
+
+pub fn target() -> TargetResult {
+    let mut base = super::armv7_unknown_linux_musleabihf::target()?;
+
+    base.llvm_target = "armv7-alpine-linux-musleabihf".to_string();
+    base.target_vendor = "alpine".to_string();
+    base.options.crt_static_default = false;
+    base.options.static_position_independent_executables = true;
+    base.options.need_rpath = true;
+
+    Ok(base)
+}
diff --git a/spec/i586_alpine_linux_musl.rs b/spec/i586_alpine_linux_musl.rs
new file mode 100644
index 0000000..e9e3cb5
--- /dev/null
+++ b/spec/i586_alpine_linux_musl.rs
@@ -0,0 +1,14 @@
+use crate::spec::TargetResult;
+
+pub fn target() -> TargetResult {
+    let mut base = super::i686_unknown_linux_musl::target()?;
+
+    base.options.cpu = "pentium4".to_string();
+    base.llvm_target = "i586-alpine-linux-musl".to_string();
+    base.target_vendor = "alpine".to_string();
+    base.options.crt_static_default = false;
+    base.options.static_position_independent_executables = true;
+    base.options.need_rpath = true;
+
+    Ok(base)
+}
diff --git a/spec/mod.rs b/spec/mod.rs
index 2824d9c..c5f402b 100644
--- a/spec/mod.rs
+++ b/spec/mod.rs
@@ -328,6 +328,12 @@ macro_rules! supported_targets {
 }
 
 supported_targets! {
+    ("i586-alpine-linux-musl", i586_alpine_linux_musl),
+    ("x86_64-alpine-linux-musl", x86_64_alpine_linux_musl),
+    ("aarch64-alpine-linux-musl", aarch64_alpine_linux_musl),
+    ("armv6-alpine-linux-musleabihf", armv6_alpine_linux_musleabihf),
+    ("armv7-alpine-linux-musleabihf", armv7_alpine_linux_musleabihf),
+    ("powerpc64le-alpine-linux-musl", powerpc64le_alpine_linux_musl),
     ("x86_64-unknown-linux-gnu", x86_64_unknown_linux_gnu),
     ("x86_64-unknown-linux-gnux32", x86_64_unknown_linux_gnux32),
     ("i686-unknown-linux-gnu", i686_unknown_linux_gnu),
@@ -628,6 +634,8 @@ pub struct TargetOptions {
     pub allows_weak_linkage: bool,
     /// Whether the linker support rpaths or not. Defaults to false.
     pub has_rpath: bool,
+    /// Whether to force rpath support on by default. Defaults to false.
+    pub need_rpath: bool,
     /// Whether to disable linking to the default libraries, typically corresponds
     /// to `-nodefaultlibs`. Defaults to true.
     pub no_default_libraries: bool,
@@ -637,6 +645,8 @@ pub struct TargetOptions {
     /// the functions in the executable are not randomized and can be used
     /// during an exploit of a vulnerability in any code.
     pub position_independent_executables: bool,
+    /// As above, but also support for static position independent executables.
+    pub static_position_independent_executables: bool,
     /// Determines if the target always requires using the PLT for indirect
     /// library calls or not. This controls the default value of the `-Z plt` flag.
     pub needs_plt: bool,
@@ -772,7 +782,7 @@ impl Default for TargetOptions {
             asm_args: Vec::new(),
             cpu: "generic".to_string(),
             features: String::new(),
-            dynamic_linking: false,
+            dynamic_linking: true,
             only_cdylib: false,
             executables: false,
             relocation_model: "pic".to_string(),
@@ -798,8 +808,10 @@ impl Default for TargetOptions {
             linker_is_gnu: false,
             allows_weak_linkage: true,
             has_rpath: false,
+            need_rpath: false,
             no_default_libraries: true,
             position_independent_executables: false,
+            static_position_independent_executables: false,
             needs_plt: false,
             relro_level: RelroLevel::None,
             pre_link_objects_exe: Vec::new(),
@@ -1112,8 +1124,10 @@ impl Target {
         key!(linker_is_gnu, bool);
         key!(allows_weak_linkage, bool);
         key!(has_rpath, bool);
+        key!(need_rpath, bool);
         key!(no_default_libraries, bool);
         key!(position_independent_executables, bool);
+        key!(static_position_independent_executables, bool);
         key!(needs_plt, bool);
         key!(relro_level, RelroLevel)?;
         key!(archive_format);
@@ -1326,8 +1340,10 @@ impl ToJson for Target {
         target_option_val!(linker_is_gnu);
         target_option_val!(allows_weak_linkage);
         target_option_val!(has_rpath);
+        target_option_val!(need_rpath);
         target_option_val!(no_default_libraries);
         target_option_val!(position_independent_executables);
+        target_option_val!(static_position_independent_executables);
         target_option_val!(needs_plt);
         target_option_val!(relro_level);
         target_option_val!(archive_format);
diff --git a/spec/powerpc64le_alpine_linux_musl.rs b/spec/powerpc64le_alpine_linux_musl.rs
new file mode 100644
index 0000000..61f5d75
--- /dev/null
+++ b/spec/powerpc64le_alpine_linux_musl.rs
@@ -0,0 +1,13 @@
+use crate::spec::TargetResult;
+
+pub fn target() -> TargetResult {
+    let mut base = super::powerpc64le_unknown_linux_musl::target()?;
+
+    base.llvm_target = "powerpc64le-alpine-linux-musl".to_string();
+    base.target_vendor = "alpine".to_string();
+    base.options.crt_static_default = false;
+    base.options.static_position_independent_executables = true;
+    base.options.need_rpath = true;
+
+    Ok(base)
+}
diff --git a/spec/x86_64_alpine_linux_musl.rs b/spec/x86_64_alpine_linux_musl.rs
new file mode 100644
index 0000000..e32a313
--- /dev/null
+++ b/spec/x86_64_alpine_linux_musl.rs
@@ -0,0 +1,13 @@
+use crate::spec::TargetResult;
+
+pub fn target() -> TargetResult {
+    let mut base = super::x86_64_unknown_linux_musl::target()?;
+
+    base.llvm_target = "x86_64-alpine-linux-musl".to_string();
+    base.target_vendor = "alpine".to_string();
+    base.options.crt_static_default = false;
+    base.options.static_position_independent_executables = true;
+    base.options.need_rpath = true;
+
+    Ok(base)
+}
