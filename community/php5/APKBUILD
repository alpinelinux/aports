# Contributor: Andy Blyler <andy@blyler.cc>
# Contributor: ≈Åukasz Jendrysik <scadu@yandex.com>
# Contributor: Carlo Landmeter <clandmeter@gmail.com>
# Contributor: Valery Kartel <valery.kartel@gmail.com>
# Maintainer: Matt Smith <mcs@darkregion.net>

# Bundled libraries
#
# Name      | License | Location               | State
# ----------+---------+------------------------+---------
# bcmath    | LGPL2   | ext/bcmath/libbcmath   | used
# date      | MIT     | ext/date/lib           | used
# gd        | BSD     | ext/gd/libgd           | used
# file      | BSD     | ext/fileinfo/libmagic  | used
# libmbfl   | LGPLv2  | ext/mbstring/libmbfl   | used
# oniguruma | BSD     | ext/mbstring/oniguruma | used
# pcre      | BSD     | ext/pcre/pcrelib       | not used
# sqlite3   | Public  | ext/sqlite3/libsqlite  | not used
# libzip    | BSD     | ext/zip/lib            | not used
# libXMLRPC | BSD     | ext/xmlrpc/libxmlrpc   | used

pkgname=php5
_pkgreal=php
pkgver=5.6.30
pkgrel=3
_apiver=20131106
_suffix=${pkgname#php}
# Is this package the default (latest) PHP version?
_default_php="no"
pkgdesc="The PHP$_suffix language runtime engine"
url="http://www.php.net/"
arch="all"
options="!check"
license="PHP-3 BSD LGPL2 MIT Zend"
depends="$pkgname-common"
depends_dev="$pkgname=$pkgver-r$pkgrel autoconf pcre-dev"
# Most dependencies between extensions is auto-discovered (see _extension()).
_depends_mysqlnd="$pkgname-openssl"
_depends_pdo_mysql="$pkgname-pdo $pkgname-mysqlnd"
_depends_phar="$pkgname"
# openssl is actually transitive dependency here, but we need to because of
# load index based on number of dependencies.
_depends_mysqli="$pkgname-mysqlnd $pkgname-openssl"
makedepends="
	autoconf
	apache2-dev
	aspell-dev
	bison
	bzip2-dev
	curl-dev
	db-dev
	enchant-dev
	freetds-dev
	freetype-dev
	gdbm-dev
	gettext-dev
	gmp-dev
	icu-dev
	imap-dev
	krb5-dev
	libedit-dev
	libical-dev
	libjpeg-turbo-dev
	libmcrypt-dev
	libpng-dev
	libressl-dev
	libwebp-dev
	libxml2-dev
	libxpm-dev
	libxslt-dev
	libzip-dev
	net-snmp-dev
	openldap-dev
	pcre-dev
	postgresql-dev
	re2c
	recode-dev
	sqlite-dev
	tidyhtml-dev
	unixodbc-dev
	zlib-dev
	"
provides="$pkgname-cli"  # for backward compatibility
subpackages="$pkgname-dev $pkgname-doc $pkgname-apache2 $pkgname-phpdbg
	$pkgname-embed $pkgname-litespeed $pkgname-cgi $pkgname-fpm
	$pkgname-pear::noarch
	"
source="http://php.net/distributions/$_pkgreal-$pkgver.tar.bz2
	$pkgname-fpm.initd
	$pkgname-fpm.logrotate
	$pkgname-module.conf
	disabled-tests.list
	install-conf.patch
	install-pear.patch
	includedir.patch
	gd-iconv.patch
	fix-asm-constraints-in-aarch64-multiply-macro.patch
	$pkgname-fpm-version-suffix.patch
	allow-build-recode-and-imap-together.patch
	fix-tests-devserver.patch
	tidy-buffio.patch
	"
builddir="$srcdir/$_pkgreal-$pkgver"

_libdir="/usr/lib/$pkgname"
_extension_dir="$_libdir/modules"
_extension_confd="/etc/$pkgname/conf.d"

_extensions="
	bcmath
	bz2
	calendar
	ctype
	curl
	dba
	dom
	enchant
	exif
	fileinfo
	ftp
	gd
	gettext
	gmp
	iconv
	imap
	intl
	json
	ldap
	mbstring
	mcrypt
	mssql
	mysql
	mysqli
	mysqlnd
	odbc
	opcache
	openssl
	pcntl
	pdo
	pdo_dblib
	pdo_mysql
	pdo_odbc
	pdo_pgsql
	pdo_sqlite
	pgsql
	phar
	posix
	pspell
	recode
	session
	shmop
	simplexml
	snmp
	soap
	sockets
	sqlite3
	sysvmsg
	sysvsem
	sysvshm
	tidy
	tokenizer
	wddx
	xml
	xmlreader
	xmlrpc
	xmlwriter
	xsl
	zip
	zlib
	"
for _ext in $_extensions; do
	case "$_ext" in
		phar) subpackages="$subpackages $pkgname-$_ext:$_ext";;
		*) subpackages="$subpackages $pkgname-$_ext:_extension";;
	esac
done
subpackages="$subpackages $pkgname-common::noarch"

case "$CARCH" in
s390x) options="$options !check";;
esac

prepare() {
	cd "$builddir"

	default_prepare
	update_config_sub

	local vapi=$(sed -n '/#define PHP_API_VERSION/{s/.* //;p}' main/php.h)
	if [ "$vapi" != "$_apiver" ]; then
		error "Upstreram API version is now $vapi. Expecting $_apiver"
		error "After updating _apiver, all 3rd-party extensions must be rebuilt."
		return 1
	fi

	# https://bugs.php.net/63362 - Not needed but installed headers.
	# Drop some Windows specific headers to avoid installation,
	# before build to ensure they are really not needed.
	rm -f TSRM/tsrm_win32.h \
		TSRM/tsrm_config.w32.h \
		Zend/zend_config.w32.h \
		ext/mysqlnd/config-win.h \
		ext/standard/winver.h \
		main/win32_internal_function_disabled.h \
		main/win95nt.h

	# Fix some bogus permissions.
	find . -name \*.[ch] -exec chmod 644 {} \;

	# XXX: Delete failing tests.
	sed -n '/^[^#]/p' "$srcdir"/disabled-tests.list | while read item; do
		rm -r $item  # do it in this way to apply globbing...
	done

	# Make php-fpm config same behavior as in php7.x
	# Remove pool definitions from main php-fpm.conf.
	# Add include to read pool definitions from php-fpm.d/*.conf.
	sed "$(($(grep -n 'Pool Definitions' sapi/fpm/php-fpm.conf.in | cut -d: -f1)+3)),\$d" \
		-i sapi/fpm/php-fpm.conf.in
	echo include=@php_fpm_sysconfdir@/php-fpm.d/*.conf >> sapi/fpm/php-fpm.conf.in

	autoconf
}

# Notes:
# * gd-jis-conv breaks any non-latin font rendering (vakartel).
# * libxml cannot be build as shared.
# * Doesn't work with system-provided onigurama, some tests fail (invalid code
#   point); probably because bundled onigurama is version 5.x, but we have 6.x.
_build() {
	local without_pcre_jit
	[ "$CARCH" = "s390x" ] && without_pcre_jit="--without-pcre-jit"

	EXTENSION_DIR=$_extension_dir ./configure \
		--build=$CBUILD \
		--host=$CHOST \
		--prefix=/usr \
		--program-suffix=$_suffix \
		--libdir=$_libdir \
		--datadir=/usr/share/$pkgname \
		--sysconfdir=/etc/$pkgname \
		--localstatedir=/var \
		--with-layout=GNU \
		--with-pic \
		--with-pear=/usr/share/pear \
		--with-config-file-path=/etc/$pkgname \
		--with-config-file-scan-dir=$_extension_confd \
		--disable-short-tags \
		\
		--enable-bcmath=shared \
		--with-bz2=shared \
		--enable-calendar=shared \
		--enable-ctype=shared \
		--with-curl=shared \
		--enable-dba=shared \
			--with-db4 \
			--with-dbmaker=shared \
			--with-gdbm \
		--enable-dom=shared \
		--with-enchant=shared \
		--enable-exif=shared \
		--enable-fileinfo=shared \
		--enable-ftp=shared \
		--with-gd=shared \
			--with-freetype-dir=/usr \
			--disable-gd-jis-conv \
			--enable-gd-native-ttf \
			--with-jpeg-dir=/usr \
			--with-png-dir=/usr \
			--with-webp-dir=/usr \
			--with-xpm-dir=/usr \
		--with-gettext=shared \
		--with-gmp=shared \
		--with-iconv=shared \
		--with-imap=shared \
			--with-imap-ssl \
		--with-icu-dir=/usr \
		--enable-intl=shared \
		--enable-json=shared \
		--with-kerberos \
		--with-ldap=shared \
			--with-ldap-sasl \
		--with-libedit \
		--enable-libxml \
		--with-libxml-dir=/usr \
		--enable-mbstring=shared \
		--with-mcrypt=shared \
		--with-mssql=shared \
		--with-mysql=shared,mysqlnd \
		--with-mysqli=shared,mysqlnd \
			--with-mysql-sock=/run/mysqld/mysqld.sock \
		--enable-mysqlnd=shared \
		--enable-opcache=shared \
		--with-openssl=shared  \
			--with-system-ciphers \
		--enable-pcntl=shared \
		--with-pcre-regex=/usr \
			$without_pcre_jit \
		--enable-pdo=shared \
			--with-pdo-dblib=shared \
			--with-pdo-mysql=shared,mysqlnd \
			--with-pdo-odbc=shared,unixODBC,/usr \
			--with-pdo-pgsql=shared \
			--with-pdo-sqlite=shared,/usr \
		--with-pgsql=shared \
		--enable-phar=shared \
		--enable-posix=shared \
		--with-pspell=shared \
		--without-readline \
		--with-recode=shared \
		--enable-session=shared \
		--enable-shmop=shared \
		--enable-simplexml=shared \
		--with-snmp=shared \
		--enable-soap=shared \
		--enable-sockets=shared \
		--with-sqlite3=shared,/usr \
		--enable-sysvmsg=shared \
		--enable-sysvsem=shared \
		--enable-sysvshm=shared \
		--with-tidy=shared \
		--enable-tokenizer=shared \
		--with-unixODBC=shared,/usr \
		--enable-wddx=shared \
		--enable-xml=shared \
		--enable-xmlreader=shared \
		--with-xmlrpc=shared \
		--enable-xmlwriter=shared \
		--with-xsl=shared \
		--enable-zip=shared \
			--with-libzip=/usr \
		--with-zlib=shared \
		--with-zlib-dir=/usr \
		$@
	make
}

build() {
	cd "$builddir"

	# phpdbg
	_build --enable-phpdbg \
		--enable-phpdbg \
		--enable-phpdbg-webhelper \
		--disable-cgi \
		--disable-cli

	# apache2 module
	_build --disable-phpdbg \
		--disable-cgi \
		--disable-cli \
		--with-apxs2
	mv libs/libphp$_suffix.so sapi/apache2handler/mod_php$_suffix.so

	# cgi, cli, fpm, embed, litespeed
	_build --disable-phpdbg \
		--enable-fpm \
		--enable-embed \
		--with-litespeed
}

check() {
	cd "$builddir"

	# PHP is so stupid that it's not able to resolve dependencies
	# between extensions and load them in correct order, so we must
	# help it...
	# opcache is Zend extension, it's handled specially in Makefile
	local php_modules=$(_extensions_by_load_order \
		| grep -vx opcache \
		| xargs -n 1 printf "'$builddir/modules/%s.la' ")
	sed -i "/^PHP_TEST_SHARED_EXTENSIONS/,/extension=/ \
		s|in \$(PHP_MODULES)\"*|in $php_modules|" Makefile

	# XXX: Few tests fail on the named platforms.
	# Ignore it for now and continue build even on test failures.
	local allow_fail='no'
	case "$CARCH" in
		x86 | armhf | aarch64) allow_fail='yes'
	esac

	NO_INTERACTION=1 REPORT_EXIT_STATUS=1 \
		SKIP_SLOW_TESTS=1 SKIP_ONLINE_TESTS=1 TEST_TIMEOUT=10 \
		TZ= LANG= LC_ALL= \
		make test || [ "$allow_fail" = yes ] || return 1

	echo 'NOTE: We have skipped quite a lot tests, see disabled-tests.list.'
}

package() {
	cd "$builddir"

	make -j1 INSTALL_ROOT="$pkgdir" install

	install -Dm644 php.ini-production "$pkgdir"/etc/$pkgname/php.ini

	local file; for file in pear peardev pecl; do
		sed -i -e "s|/usr/bin/php|/usr/bin/php$_suffix|g" \
			-e "s|PHP=php|PHP=php$_suffix|" \
			"$pkgdir"/usr/bin/$file
	done

	find "$pkgdir" -name '.*' | xargs rm -rf
	rmdir "$pkgdir"/var/run

	if [ "$_default_php" = yes ]; then
		ln -s php$_suffix "$pkgdir"/usr/bin/php
	fi
}

dev() {
	default_dev
	replaces="php-dev"

	cd "$pkgdir"

	_mv usr/bin/php-config$_suffix \
		usr/bin/phpize$_suffix \
		"$subpkgdir"/usr/bin/

	_mv ./$_libdir/build "$subpkgdir"/$_libdir/

	if [ "$_default_php" = yes ]; then
		ln -s phpize$_suffix "$subpkgdir"/usr/bin/phpize
		ln -s php-config$_suffix "$subpkgdir"/usr/bin/php-config
	fi
}

doc() {
	default_doc

	cd "$builddir"

	mkdir -p "$subpkgdir"/usr/share/doc/$pkgname
	cp CODING_STANDARDS CREDITS EXTENSIONS INSTALL LICENSE NEWS \
		README* UPGRADING* \
		"$subpkgdir"/usr/share/doc/$pkgname/
}

apache2() {
	pkgdesc="PHP$_suffix Module for Apache2"
	depends="$depends apache2"

	install -D -m 755 "$builddir"/sapi/apache2handler/mod_php$_suffix.so \
		"$subpkgdir"/usr/lib/apache2/mod_php$_suffix.so

	install -D -m 644 "$srcdir"/php$_suffix-module.conf \
		"$subpkgdir"/etc/apache2/conf.d/php$_suffix-module.conf
}

phpdbg() {
	pkgdesc="Interactive PHP$_suffix debugger"

	install -Dm755 "$builddir"/sapi/phpdbg/phpdbg \
		"$subpkgdir"/usr/bin/phpdbg$_suffix

	if [ "$_default_php" = yes ]; then
		ln -s phpdbg$_suffix "$subpkgdir"/usr/bin/phpdbg
	fi
}

embed() {
	pkgdesc="PHP$_suffix Embedded Library"

	_mv "$pkgdir"/usr/lib/libphp*.so "$subpkgdir"/usr/lib/
}

litespeed() {
	pkgdesc="PHP$_suffix LiteSpeed SAPI"

	mkdir -p "$subpkgdir"/usr/bin
	mv "$pkgdir"/usr/bin/lsphp "$subpkgdir"/usr/bin/lsphp$_suffix

	if [ "$_default_php" = yes ]; then
		ln -s lsphp$_suffix "$subpkgdir"/usr/bin/lsphp
	fi
}

cgi() {
	pkgdesc="PHP$_suffix Common Gateway Interface"

	_mv "$pkgdir"/usr/bin/php-cgi$_suffix "$subpkgdir"/usr/bin/

	if [ "$_default_php" = yes ]; then
		ln -s php-cgi$_suffix "$subpkgdir"/usr/bin/php-cgi
	fi
}

fpm() {
	pkgdesc="PHP$_suffix FastCGI Process Manager"

	cd "$pkgdir"

	_mv var "$subpkgdir"/
	_mv usr/share/$pkgname/fpm "$subpkgdir"/var/lib/$pkgname/
	_mv usr/sbin "$subpkgdir"/usr/
	_mv etc/$pkgname/php-fpm* "$subpkgdir"/etc/$pkgname/

	local file; for file in php-fpm.conf php-fpm.d/www.conf; do
		mv "$subpkgdir"/etc/$pkgname/$file.default \
			"$subpkgdir"/etc/$pkgname/$file
	done

	install -D -m 755 "$srcdir"/$pkgname-fpm.initd \
		"$subpkgdir"/etc/init.d/php-fpm$_suffix

	install -D -m 644 "$srcdir"/$pkgname-fpm.logrotate \
		"$subpkgdir"/etc/logrotate.d/php-fpm$_suffix

	mkdir -p "$subpkgdir"/var/log/$pkgname
}

pear() {
	pkgdesc="PHP$_suffix Extension and Application Repository"
	depends="$pkgname $pkgname-xml"

	cd "$pkgdir"

	# pecl needs xml extension and since we build it as shared, it must be
	# explicitly declared to be loaded.
	sed -i 's/\$INCARG/& -d extension=xml.so/' usr/bin/pecl

	mkdir -p "$subpkgdir"/usr/bin
	local file; for file in pecl pear peardev; do
		mv usr/bin/$file "$subpkgdir"/usr/bin/$file$_suffix
		if [ "$_default_php" = yes ]; then
			ln -s $file$_suffix "$subpkgdir"/usr/bin/$file
		fi
	done

	_mv etc/$pkgname/pear.conf "$subpkgdir"/etc/$pkgname/
	_mv usr/share "$subpkgdir"/usr/
}

common() {
	pkgdesc="$pkgdesc (common config)"
	depends=""

	cd "$pkgdir"

	_mv usr/lib "$subpkgdir"/usr/
	_mv etc "$subpkgdir"/
	mkdir -p "$subpkgdir"/$_extension_confd
}

phar() {
	_extension

	cd "$pkgdir"

	mkdir -p "$subpkgdir"/usr/bin
	mv usr/bin/phar.phar "$subpkgdir"/usr/bin/phar.phar$_suffix

	rm usr/bin/phar
	ln -s phar.phar$_suffix "$subpkgdir"/usr/bin/phar$_suffix

	if [ "$_default_php" = yes ]; then
		ln -s phar.phar$_suffix "$subpkgdir"/usr/bin/phar.phar
		ln -s phar.phar$_suffix "$subpkgdir"/usr/bin/phar
	fi
}

_extension() {
	local extname="${subpkgname#$pkgname-}"
	local extdepends="$(eval "echo \$_depends_$extname")"
	local extdesc="$(head -n1 "$builddir"/ext/$extname/CREDITS 2>/dev/null ||:)"
	pkgdesc="PHP$_suffix extension: ${extdesc:-$extname}"

	: ${extdepends:=$(_resolve_extension_deps "$extname")}
	depends="$depends $extdepends"

	local load_order=$(_extension_load_order "$extname")

	# extension prefix
	local prefix=
	[ "$extname" != "opcache" ] || prefix="zend_"

	_mv "$pkgdir"/$_extension_dir/$extname.so \
		"$subpkgdir"/$_extension_dir/

	mkdir -p "$subpkgdir"/$_extension_confd
	echo "${prefix}extension=$extname.so" \
		> "$subpkgdir"/$_extension_confd/$(printf %02d $load_order)_$extname.ini
}

# Resolves dependencies of the given extension name (without $pkgname- prefix)
# on other extensions in $_extensions and prints them with $pkgname- prefix.
_resolve_extension_deps() {
	local name="$1"

	# We use config.w32 just because it's more accurate than config.m4.
	local config="$builddir/ext/$name/config.w32"
	[ -f "$config" ] || return 0

	cat "$config" \
		| sed -En "s/.*ADD_EXTENSION_DEP\('$name', ([^)]+)\).*/\1/p" \
		| tr -d "'," | tr ' ' '\n' \
		| sort -u \
		| while read dep; do
			if echo "$_extensions" | grep -qw "$dep"; then
				echo "$pkgname-$dep"
			fi
		done
}

# Prints a load order (0-based integer) for the given extension name. Extension
# with lower load order should be loaded before exts with higher load order.
# It's based on number of dependencies of the extension (with exception for
# "imap"), which is flawed, but simple and good enough for now.
_extension_load_order() {
	local name="$1"
	local deps=$(eval "echo \$_depends_$name")

	case "$name" in
		# XXX: This must be loaded after recode, even though it does
		# not depend on it. So we must use this hack...
		imap) echo 1;;
		mysql) echo 1;;
		*) echo "${deps:=$(_resolve_extension_deps $name)}" | wc -w;;
	esac
}

# Prints $_extensions sorted by load order and name.
_extensions_by_load_order() {
	local deps list name

	for name in $_extensions; do
		list="$list $(_extension_load_order $name);$name"
	done
	printf '%s\n' $list | sort -t ';' -k 1 | sed -E 's/\d+;//'
}

_mv() {
	local dest; for dest; do true; done  # get last argument
	mkdir -p "$dest"
	mv $@
}

sha512sums="12734d786cca5767b8b8838affbe1c3d578dd179c8d5339653d905658562c5fdf39a88349213b1340f320320700a5378aed617447b6e15909019788a49ad2da0  php-5.6.30.tar.bz2
eccbd0c99645577e78529ed31e391912998b0e8d75e874d532084b0ef232b94c8721fd1540b53efe4eeb7ae71d0962c66dbf52077dfdaec28df7641b2e7aa5b7  php5-fpm.initd
d7226c54bf89dd45abf75f5bc844aa18bfaeca5637d8812cce653fd7f947590c3054845c74a819eea5f4fededddf725a989703ed6a97d7f9f80cfb87aa2fe511  php5-fpm.logrotate
97e9d92cb85e7facaf5d00af5374c7f183bf3d173733b377f80c7ab5c1bb069e52c9ebe74b64a06a29a113f7237574d630ede3632c5ef7b661325d5766a799d0  php5-module.conf
3f0a4e23c6412df903e9e54a1d07b918eecda275e4e3ce0819a7c548af4f752c91b3815a6ae03271c4983ec51c5c10b720ea9f93bc6b63a4989d9adebfe50fbd  disabled-tests.list
8082cfde05fddf7a1f5d6db058b186228948b020c585fba694d00fb7c4a8fc974f6d24f720bebc26ac4399fa7cc2a7dcd38465dc5e30745d521fd6354a899960  install-conf.patch
f1177cbf6b1f44402f421c3d317aab1a2a40d0b1209c11519c1158df337c8945f3a313d689c939768584f3e4edbe52e8bd6103fb6777462326a9d94e8ab1f505  install-pear.patch
8fc56dc52b8eb2c88c69b445dd667ceefc5407017ba323701134bda9cd4f6b154db86442e5285817b5eb9799bf9e9dd11523e75006760fba80b334991d477088  includedir.patch
6ecd0be2da1dc5b1d7512e46a2a5cd107a8b2a8c364efc9c624a7d6b2ab081685a329c94c22c970dc14c5c1115f702c512e97ae858da1bc69c6423323dbeeba2  gd-iconv.patch
d93d3fc015580cf5f75c6cbca4cd980e054b61e1068495da81a7e61f1af2c9ae14f09964c04928ad338142de78e4844aed885b1ad1865282072999fb045c8ad7  fix-asm-constraints-in-aarch64-multiply-macro.patch
6faee5ac025a4ac1b263a4b88d0f559e3af61126f5000fafb63691631d260f346a85204389b552eb103889e1455eb4f887e35c712329dd5cc827c2fdc0d55172  php5-fpm-version-suffix.patch
f8ecae241a90cbc3e98aa4deb3d5d35ef555f51380e29f4e182a8060dffeb84be74f030a14c6b452668471030d78964f52795ca74275db05543ccad20ef1f2cc  allow-build-recode-and-imap-together.patch
01c3c65f153ea92192f2b2694d93a086ffa67c282fe046f877842942692c25666e4154a09aba6c2161f7f2a3b6595f4d79573e9ee74aec774a95f2f9725846f9  fix-tests-devserver.patch
6894c9cba7752a3406e774d9efc0e058c37433493c1c20101e9563bf247c112157a67e306b06b9517b0422eca521f543d637a6cbd2cea7639e43f13d773b3d2b  tidy-buffio.patch"
