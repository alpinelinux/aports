# Contributor: Travis Tilley <ttilley@gmail.com>
# Contributor: Mitch Tishmack <mitch.tishmack@gmail.com>
# Contributor: Jakub Jirutka <jakub@jirutka.cz>
# Maintainer: Travis Tilley <ttilley@gmail.com>
_pkgname=llvm
pkgver=3.7.1
_majorver=${pkgver%.*}
pkgname=$_pkgname$_majorver
pkgrel=6
pkgdesc="Low Level Virtual Machine compiler system (version $_majorver)"
arch="all"
url="http://llvm.org/"
license="UOI-NCSA"
depends_dev="$pkgname=$pkgver-r$pkgrel"
makedepends="binutils-dev chrpath cmake file libffi-dev paxmark python2 zlib-dev"
subpackages="$pkgname-static $pkgname-libs $pkgname-dev"
source="https://llvm.org/releases/$pkgver/llvm-$pkgver.src.tar.xz
	llvm-0001-Add-Musl-MuslEABI-and-Musl-EABIHF-triples.patch
	llvm-0002-Fix-build-with-musl-libc.patch
	llvm-0003-Fix-DynamicLibrary-to-build-with-musl-libc.patch
	llvm-d18644-systemz-atomic-fence.patch
	llvm-nm-workaround.patch
	config.guess.patch
	cmake-fix-libLLVM-name.patch
	"
builddir="$srcdir/$_pkgname-$pkgver.src"

# ARM has few failures in test suite that we don't care about currently and
# also it takes forever to run them on the builder.
case "$CARCH" in
	arm*|aarch64) options="!check";; # FIXME
esac

# NOTE: It seems that there's no (sane) way how to change includedir, sharedir
# etc. separately, just the CMAKE_INSTALL_PREFIX. Standard CMake variables and
# even  LLVM-specific variables, that are related to these paths, actually
# don't work (in llvm 3.7).
#
# When building a software that depends on LLVM, utility llvm-config should be
# used to discover where is LLVM installed. It provides options to print
# path of bindir, includedir, and libdir separately, but in its source, all
# these paths are actually hard-coded against INSTALL_PREFIX. We can patch it
# and move paths manually, but I'm really not sure what it may break...
#
# Also note that we should *not* add version suffix to files in llvm bindir!
# It breaks build system of some software that depends on LLVM, because they
# don't expect these files to have a sufix.
#
# So, we install all the LLVM files into /usr/lib/llvm-$_majorver.
# BTW, Fedora and Debian do the same thing.
#
_prefix="usr/lib/llvm$_majorver"

prepare() {
	default_prepare
	cd "$builddir"

	update_config_sub

	# Remove some tests that fails.
	rm test/tools/llvm-objdump/macho-compact-unwind-x86_64.test \
		test/tools/llvm-objdump/macho-compact-unwind-i386.test \
		test/Transforms/GlobalOpt/alias-used.ll

	mkdir -p "$builddir"/build
}

build() {
	cd "$builddir"/build

	# Auto-detect it by guessing either.
	local ffi_include_dir="$(pkg-config --cflags-only-I libffi | sed 's|^-I||g')"

	cmake -G "Unix Makefiles" -Wno-dev \
		-DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_INSTALL_PREFIX=/$_prefix \
		-DCMAKE_VERBOSE_MAKEFILE=NO \
		-DFFI_INCLUDE_DIR="$ffi_include_dir" \
		-DLLVM_BINUTILS_INCDIR=/usr/include \
		-DLLVM_BUILD_DOCS=OFF \
		-DLLVM_BUILD_EXAMPLES=OFF \
		-DLLVM_BUILD_EXTERNAL_COMPILER_RT=ON \
		-DLLVM_BUILD_LLVM_DYLIB=ON \
		-DLLVM_BUILD_TESTS=ON \
		-DLLVM_DEFAULT_TARGET_TRIPLE="$CBUILD" \
		-DLLVM_DYLIB_EXPORT_ALL=ON \
		-DLLVM_ENABLE_ASSERTIONS=OFF \
		-DLLVM_ENABLE_CXX1Y=ON \
		-DLLVM_ENABLE_FFI=ON \
		-DLLVM_ENABLE_LIBCXX=OFF \
		-DLLVM_ENABLE_PIC=ON \
		-DLLVM_ENABLE_RTTI=ON \
		-DLLVM_ENABLE_SPHINX=OFF \
		-DLLVM_ENABLE_TERMINFO=ON \
		-DLLVM_ENABLE_ZLIB=ON \
		-DLLVM_HOST_TRIPLE="$CHOST" \
		-DLLVM_INCLUDE_EXAMPLES=OFF \
		-DLLVM_TARGETS_TO_BUILD='X86;ARM;AArch64;PowerPC;SystemZ;AMDGPU;NVPTX;Mips;BPF' \
		"$builddir"

	make llvm-tblgen
	make

	paxmark m \
		bin/llvm-rtdyld \
		bin/lli \
		bin/lli-child-target \
		unittests/ExecutionEngine/MCJIT/MCJITTests \
		unittests/Support/SupportTests
}

check() {
	cd "$builddir"/build

	make check-llvm
}

package() {
	cd "$builddir"/build

	make DESTDIR="$pkgdir" install

	# This tool is needed e.g. for running codegen tests in Rust package.
	install -D -m 755 bin/FileCheck "$pkgdir"/$_prefix/bin/FileCheck

	cd "$pkgdir"/$_prefix

	# Remove RPATHs.
	file lib/*.so bin/* \
		| awk -F: '$2~/ELF/{print $1}' \
		| xargs -r chrpath -d

	# Symlink files from /usr/lib/llvm*/bin to /usr/bin.
	mkdir -p "$pkgdir"/usr/bin
	local name path
	for path in bin/*; do
		name=${path##*/}
		case "$name" in
			FileCheck | obj2yaml | yaml2obj) continue;;
		esac
		ln -s ../lib/llvm$_majorver/bin/$name "$pkgdir"/usr/bin/$name-$_majorver
	done

	# Move /usr/lib/$pkgname/include/ into /usr/include/$pkgname/
	# and symlink it back.
	_mv include/* "$pkgdir"/usr/include/$pkgname/
	rmdir include
	ln -s ../../include/$pkgname include

	# Move /usr/lib/$pkgname/share/llvm/cmake/ into /usr/lib/cmake/$pkgname/
	# and symlink it back.
	_mv share/llvm/cmake/* "$pkgdir"/usr/lib/cmake/$pkgname/
	rmdir share/llvm/cmake
	ln -s ../../../cmake/$pkgname share/llvm/cmake

	ln -s libLTO-$_majorver.so lib/libLTO.so
}

static() {
	pkgdesc="LLVM $_majorver static libraries"

	_mv "$pkgdir"/$_prefix/lib/*.a "$subpkgdir"/$_prefix/lib/
}

libs() {
	pkgdesc="LLVM $_majorver runtime library"
	local soname="libLLVM-$_majorver.so"
	local soname2="libLLVM-$pkgver.so"

	mkdir -p "$subpkgdir"
	cd "$subpkgdir"

	# libLLVM should be in /usr/lib. This is needed for binaries that are
	# dynamically linked with libLLVM, so they can find it on default path.
	_mv "$pkgdir"/$_prefix/lib/$soname usr/lib/
	ln -s $soname usr/lib/$soname2

	# And also symlink it back to the LLVM prefix.
	mkdir -p $_prefix/lib
	ln -s ../../$soname $_prefix/lib/$soname
	ln -s ../../$soname $_prefix/lib/$soname2
}

dev() {
	default_dev
	cd "$subpkgdir"

	_mv "$pkgdir"/$_prefix/lib \
		"$pkgdir"/$_prefix/share \
		"$pkgdir"/$_prefix/include \
		$_prefix/

	_mv "$pkgdir"/$_prefix/bin/FileCheck \
		"$pkgdir"/$_prefix/bin/llvm-config \
		$_prefix/bin/

	_mv "$pkgdir"/usr/bin/llvm-config-* usr/bin/
}

_mv() {
	local dest; for dest; do true; done  # get last argument
	mkdir -p "$dest"
	mv $@
}

sha512sums="ac521debc02f6deba96ef975d6a546b0c5c77299c1dbf5e1b87a7974ff5e7fd715bd7e384b92d9adf572ce47130bdbf6d3c648eb0d7f72f16f976292e4909e90  llvm-3.7.1.src.tar.xz
7a74abc15d8abb4ef4884469544168bfefb6859166f041c7d766157d77b20ea5b6bb06ffc0dd4f6965eab95294102f060d7a969e778ec933d2859c4900ec7380  llvm-0001-Add-Musl-MuslEABI-and-Musl-EABIHF-triples.patch
f84cd65d7042e89826ba6e8d48c4c302bf4980da369d7f19a55f217e51c00ca8ed178d453df3a3cee76598a7cecb94aed0775a6d24fe73266f82749913fc3e71  llvm-0002-Fix-build-with-musl-libc.patch
19bfb9282455d39d07dbb2b1293b03a45c57d522fbb9c5e58dac034200669628b97e7a90cd4ff5d52d9bb79acfccbef653d8a1140a7f0589ecd6f9b7c4ba0eb6  llvm-0003-Fix-DynamicLibrary-to-build-with-musl-libc.patch
303ef099e8e21f9bc5f88ba1b30870e8127bea4948fc66b1858cc014cbde7bd917dc0bee1a511ef2adb6a9f40a3e3c3ae3fcada6ad3ee339807ac893c882d7ae  llvm-d18644-systemz-atomic-fence.patch
11db6f3c5d697bc536c7d053530f7a5572756185e16399c32c31306861b58046ca9bc14b8d8097758c00a8c1a7026cbfb75636c0e697e59c53dda5848f93b006  llvm-nm-workaround.patch
caf1c9466e8163f8844bd40095d1c3ce26c9e96dcb639f64833baca65a81708d39496e8c8ea65c7f11476d752265080998f1873b79cbc92b23349258e4dfa3ab  config.guess.patch
52287dd37f62e0b51c487abe62a22440d3e9df2cb6144af45ba9ddc42848495fad533bf6b13f08e1b454ee653be9b8a14e02cf81f430a7d2c9be030889ef7f72  cmake-fix-libLLVM-name.patch"
